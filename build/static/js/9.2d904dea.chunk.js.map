{"version":3,"sources":["components/Input/Input.tsx","utils/erc20.ts","hooks/useApprove.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","hooks/useHarvest.ts","components/TokenInput/TokenInput.tsx","components/Tags.tsx","hooks/useStake.ts","views/Farms/components/Divider.tsx","config/index.ts","components/layout/Flex.tsx","hooks/useUnstake.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/Farms.tsx"],"names":["StyledInputWrapper","styled","div","props","theme","colors","input","radii","default","spacing","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","balance","useApprove","dispatch","useDispatch","useWallet","useMasterchef","useToast","toastError","toastSuccess","onApprove","useCallback","approve","tx","fetchFarmUserDataAsync","useSousApprove","sousId","sousChefContract","useSousChef","updateUserAllowance","usePreSaleApprove","tokenContract","spenderAddress","ethers","constants","MaxUint256","send","from","StyledSpacer","size","Spacer","s","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","useHarvest","farmPid","onReward","harvest","txHash","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","useSousHarvest","isUsingBnb","handleHarvest","soushHarvestBnb","soushHarvest","updateUserPendingReward","updateUserBalance","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","TranslateString","useI18n","useValue","useMax","toLocaleString","onClick","BigNumber","times","toString","NoFeeTag","variant","outline","startIcon","CoreTag","CommunityTag","SpecialTag","BinanceTag","useSousStake","handleStake","amount","stake","sousStakeBnb","sousStake","updateUserStakedBalance","onStake","useStake","decimals","console","info","textSubtle","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","SYRUPIDS","useSousUnstake","isOldSyrup","includes","onUnstake","unstake","sousEmegencyUnstake","sousUnstake","useUnstake","Wrapper","ExpandableSectionButton","expanded","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","exchange","liquidityUrlPathParts","swapURLFirstPart","addURLFirstPart","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","risk","farmImage","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","DepositModal","onConfirm","onDismiss","tokenName","tokenDecimals","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","undefined","handleChange","e","currentTarget","handleSelectMax","title","disabled","isNaN","isLessThanOrEqualTo","WithdrawModal","IconButtonWrapper","Label","SciNumber","StakeAction","stakedBalance","tokenBalance","usdStaked","quoteTokenDecimals","rawStakedBalance","getBalanceNumber","correctedStakeBalance","parseFloat","toPrecision","displayBalance","getCorrectedNumber","correctedDisplayUsd","displayUSD","useModal","onPresentDeposit","onPresentWithdraw","toExponential","split","gt","mr","BalanceAndCompound","HarvestAction","earnings","usdEarnings","rawEarningsBalance","toFixed","marginBottom","Action","CardActions","ToastContainer","farm","ethereum","totalValue","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","lpAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","cakePrice","usePriceCakeBusd","handleApprove","error","lpStakedTotal","textTransform","fontSize","pr","multipliedBy","dividedBy","mt","fullWidth","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","StyledCardAccentSpecial","FCard","card","background","concat","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","maximumFractionDigits","farmAPY","minimumFractionDigits","formatted","forEach","format","parts","match","style","display","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","Farms","farmsProps","path","farmsLP","useFarms","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","eggPerBlock","poolWeight","pow","comparedTo","Page","textAlign","exact"],"mappings":"sKAqBMA,EAAqBC,IAAOC,IAAV,6JAEF,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOC,SACjC,SAACH,GAAD,OAAWA,EAAMC,MAAMG,MAAMC,WAGjC,SAACL,GAAD,OAAWA,EAAMC,MAAMK,QAAQ,MAGxCC,EAAcT,IAAOK,MAAV,8LAIN,SAACH,GAAD,OAAWA,EAAMC,MAAMC,OAAOM,WAS1BC,IAhCqB,SAAC,GAAoE,IAAlEC,EAAiE,EAAjEA,aAAcC,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,eAAgBC,EAAY,EAAZA,MAC1F,OACE,eAACjB,EAAD,aACKgB,GAAkBA,EACrB,cAACN,EAAD,CAAaK,YAAaA,EAAaE,MAAOA,EAAOH,SAAUA,MAC5DD,GAAgBA,O,6LCVZK,EAAc,SAACC,EAAwBC,GAGlD,OADiB,IADJ,IAAIC,IAAKF,GACIG,IAAIC,UAAUC,EAA8BJ,IAI3DK,EAAY,uCAAG,WAC1BC,EACAC,EACAC,GAH0B,eAAAC,EAAA,+EAMQH,EAAWI,QAAQC,UAAUH,EAASD,EAAmBK,QAAQZ,SAASa,OANlF,cAMlBF,EANkB,yBAOjBA,GAPiB,yDASjB,KATiB,yDAAH,0DAaZG,EAAe,uCAAG,WAC7Bf,EACAgB,EACAC,GAH6B,iBAAAP,EAAA,6DAKvBQ,EAAWnB,EAAYC,EAAUgB,GALV,kBAOGE,EAASP,QAAQQ,UAAUF,GAAaH,OAP3C,cAOrBM,EAPqB,yBAQpBA,GARoB,yDAUpB,KAVoB,yDAAH,2D,uOCdfC,EAAa,SAACd,GACzB,IAAMe,EAAWC,cACTd,EAAiCe,cAAjCf,QACFD,EAAqBiB,cAC3B,EAAqCC,cAA7BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,aAcpB,MAAO,CAAEC,UAZaC,sBAAW,sBAAC,4BAAApB,EAAA,+EAEbqB,YAAQxB,EAAYC,EAAoBC,GAF3B,cAExBuB,EAFwB,OAG9BV,EAASW,YAAuBxB,IAChCmB,EAAa,UAAD,iBAJkB,kBAKvBI,GALuB,uCAO9BL,EAAW,qBAAD,0CAPoB,mBAQvB,GARuB,yDAU/B,CAAClB,EAASa,EAAUf,EAAYC,EAAoBmB,EAAYC,MAMxDM,EAAiB,SAAC3B,EAAsB4B,GACnD,IAAMb,EAAWC,cACTd,EAAiCe,cAAjCf,QACF2B,EAAmBC,YAAYF,GAYrC,MAAO,CAAEN,UAVaC,sBAAW,sBAAC,4BAAApB,EAAA,+EAEbqB,YAAQxB,EAAY6B,EAAkB3B,GAFzB,cAExBuB,EAFwB,OAG9BV,EAASgB,YAAoBH,EAAQ1B,IAHP,kBAIvBuB,GAJuB,0DAMvB,GANuB,yDAQ/B,CAACvB,EAASa,EAAUf,EAAY6B,EAAkBD,MAwC1CI,EAAoB,SAACC,EAAyBC,GACzD,IAAQhC,EAAYe,cAAZf,QAYR,OAXkBqB,sBAAW,sBAAC,4BAAApB,EAAA,+EAET8B,EAAc7B,QAC5BoB,QAAQU,EAAgBC,SAAOC,UAAUC,YACzCC,KAAK,CAAEC,KAAMrC,IAJU,cAEpBuB,EAFoB,yBAKnBA,GALmB,0DAOnB,GAPmB,yDAS3B,CAACvB,EAASgC,EAAgBD,M,uGCnEzBO,EAAejE,IAAOC,IAAV,+DACN,SAACC,GAAD,OAAWA,EAAMgE,QAClB,SAAChE,GAAD,OAAWA,EAAMgE,QAGbC,EA5BuB,SAAC,GAAqB,IAGtDC,EAHqD,IAAlBF,YAAkB,MAAX,KAAW,EACjD1D,EAAY6D,qBAAWC,KAAvB9D,QAGR,OAAQ0D,GACN,IAAK,KACHE,EAAI5D,EAAQ,GACZ,MACF,IAAK,KACH4D,EAAI5D,EAAQ,GACZ,MACF,IAAK,KACL,QACE4D,EAAI5D,EAAQ,GAGhB,OAAO,cAACyD,EAAD,CAAcC,KAAME,M,2HCJvBG,EAAqBvE,IAAOC,IAAV,mIAEF,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOoE,eAGvC,SAACtE,GAAD,OAAWA,EAAMC,MAAMK,QAAQ,MAGtCiE,EAAoBzE,IAAOC,IAAV,+DAKRyE,EA3BgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1BC,EAAIC,IAAMC,SAASC,QAAQJ,GAAUK,OAC3C,OACE,cAACT,EAAD,UACGM,IAAMC,SAASG,IAAIN,GAAU,SAACO,EAAOC,GAAR,OAC5B,qCACE,cAACV,EAAD,UAAoBS,IACnBC,EAAIP,EAAI,GAAK,cAACT,EAAA,EAAD,c,sOCJXiB,EAAa,SAACC,GACzB,IAAM7C,EAAWC,cACTd,EAAYe,cAAZf,QACFD,EAAqBiB,cAC3B,EAAqCC,cAA7BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,aAcpB,MAAO,CAAEwC,SAZatC,sBAAW,sBAAC,4BAAApB,EAAA,+EAET2D,YAAQ7D,EAAoB2D,EAAS1D,GAF5B,cAExB6D,EAFwB,OAG9BhD,EAASW,YAAuBxB,IAChCmB,EAAa,UAAU,oCAJO,kBAKvB0C,GALuB,uCAOhC3C,EAAW,qBAAD,6CAPsB,mBAQzB,GARyB,yDAU/B,CAAClB,EAASa,EAAU6C,EAAS3D,EAAoBmB,EAAYC,MAKrD2C,EAAgB,SAACC,GAC5B,IAAQ/D,EAAYe,cAAZf,QACFD,EAAqBiB,cAU3B,MAAO,CAAE2C,SARatC,sBAAW,sBAAC,4BAAApB,EAAA,6DAC1B+D,EAAkBD,EAASE,QAAO,SAACC,EAAOC,GAC9C,MAAM,GAAN,mBAAWD,GAAX,CAAkBN,YAAQ7D,EAAoBoE,EAAKnE,OAClD,IAH6B,kBAKzBoE,QAAQC,IAAIL,IALa,2CAM/B,CAAChE,EAAS+D,EAAUhE,MAKZuE,EAAiB,SAAC5C,GAAgC,IAAxB6C,EAAuB,wDACtD1D,EAAWC,cACjB,EAAoBC,cAAZf,EAAR,EAAQA,QACF2B,EAAmBC,YAAYF,GAC/B3B,EAAqBiB,cAErBwD,EAAgBnD,sBAAW,sBAAC,sBAAApB,EAAA,yDACjB,IAAXyB,EAD4B,gCAExBkC,YAAQ7D,EAAoB,EAAGC,GAFP,kCAGrBuE,EAHqB,iCAIxBE,YAAgB9C,EAAkB3B,GAJV,gDAMxB0E,YAAa/C,EAAkB3B,GANP,QAQhCa,EAAS8D,YAAwBjD,EAAQ1B,IACzCa,EAAS+D,YAAkBlD,EAAQ1B,IATH,4CAU/B,CAACA,EAASa,EAAU0D,EAAYxE,EAAoB4B,EAAkBD,IAEzE,MAAO,CAAEiC,SAAUa,K,kJCXfK,EAAmBxG,IAAOC,IAAV,0BAEhBgE,EAAejE,IAAOC,IAAV,6CACP,SAACC,GAAD,OAAWA,EAAMC,MAAMK,QAAQ,MAGpCiG,EAA8BzG,IAAOC,IAAV,sEAK3ByG,EAAgB1G,IAAOC,IAAV,6KAER,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOM,WAQnCiG,EAAoB3G,IAAO4G,KAAV,gEACZ,SAAC1G,GAAD,OAAWA,EAAMC,MAAMC,OAAOM,WAI1BmG,EA/D+B,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,IAAKC,EAA6D,EAA7DA,OAAQlG,EAAqD,EAArDA,SAAUmG,EAA2C,EAA3CA,YAAahG,EAA8B,EAA9BA,MAA8B,IAAvBiG,oBAAuB,MAAR,EAAQ,EAC3GC,EAAkBC,cAClBC,EAAWpG,EACXqG,EAASP,EAEf,OACE,eAACN,EAAD,WACE,eAACE,EAAD,WACGW,EAAOC,iBADV,IAC6BP,EAD7B,IACsCG,EAAgB,IAAK,gBAG3D,cAACvG,EAAA,EAAD,CACEC,aACE,eAAC6F,EAAD,WACE,cAACE,EAAD,UAAoBI,IACpB,cAAC9C,EAAD,IACA,8BACE,cAAC,IAAD,CAAQC,KAAK,KAAKqD,QAASP,EAA3B,SACGE,EAAgB,IAAK,cAK9BrG,SAAUA,EACVC,YAAY,IACZE,MAAOoG,IAERH,EAAe,EACd,eAACP,EAAD,WACGQ,EAAgB,MAAO,eAD1B,KAC4C,IAAIM,IAAUJ,GAAY,GAAGK,MAAMR,EAAe,KAAOS,WAAY,IAC9GX,KAED,U,iCC9CV,mMAGMY,EAAW,kBACf,cAAC,IAAD,CAAKC,QAAQ,UAAUC,SAAO,EAACC,UAAW,cAAC,IAAD,IAA1C,sBAYIC,EAAU,kBACd,cAAC,IAAD,CAAKH,QAAQ,YAAYC,SAAO,EAACC,UAAW,cAAC,IAAD,IAA5C,mBAKIE,EAAe,kBACnB,cAAC,IAAD,CAAKJ,QAAQ,aAAaC,SAAO,EAACC,UAAW,cAAC,IAAD,IAA7C,wBAIIG,EAAa,kBACjB,cAAC,IAAD,CAAKL,QAAQ,aAAaC,SAAO,EAACC,UAAW,cAAC,IAAD,IAA7C,sBAKII,EAAa,kBACjB,cAAC,IAAD,CAAKN,QAAQ,UAAUC,SAAO,EAACC,UAAW,cAAC,IAAD,IAA1C,uB,0JCFWK,EAAe,SAAC9E,GAAgC,IAAxB6C,EAAuB,wDACpD1D,EAAWC,cACjB,EAAoBC,cAAZf,EAAR,EAAQA,QACFD,EAAqBiB,cACrBW,EAAmBC,YAAYF,GAE/B+E,EAAcpF,sBAAW,uCAC7B,WAAOqF,GAAP,SAAAzG,EAAA,yDACiB,IAAXyB,EADN,gCAEUiF,YAAM5G,EAAoB,EAAG2G,EAAQ1G,GAF/C,kCAGauE,EAHb,iCAIUqC,YAAajF,EAAkB+E,EAAQ1G,GAJjD,gDAMU6G,YAAUlF,EAAkB+E,EAAQ1G,GAN9C,QAQEa,EAASiG,YAAwBpF,EAAQ1B,IACzCa,EAAS+D,YAAkBlD,EAAQ1B,IATrC,4CAD6B,sDAY7B,CAACA,EAASa,EAAU0D,EAAYxE,EAAoB4B,EAAkBD,IAGxE,MAAO,CAAEqF,QAASN,IAGLO,IA/CE,SAAC7C,GAChB,IAAMtD,EAAWC,cACTd,EAAYe,cAAZf,QACFD,EAAqBiB,cAC3B,EAAqCC,cAA7BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,aAgBpB,MAAO,CAAE4F,QAdW1F,sBAAW,uCAC7B,WAAOqF,EAAgBO,GAAvB,eAAAhH,EAAA,+EAEyB0G,YAAM5G,EAAoBoE,EAAKuC,EAAQ1G,EAASiH,GAFzE,OAEUpD,EAFV,OAGIhD,EAASW,YAAuBxB,IAChCkH,QAAQC,KAAKtD,GACb1C,EAAa,UAAU,iCAL3B,gDAOID,EAAW,qBAAD,8CAPd,yDAD6B,wDAW7B,CAAClB,EAASa,EAAUd,EAAoBoE,EAAKhD,EAAcD,O,sDCxBhD7C,QAAOC,IAAtB,8GACsB,qBAAGE,MAAkBC,OAAO2I,e,iCCHlD,+CAEAvB,IAAUwB,OAAO,CACfC,eAAgB,IAChBC,eAAgB,KAGY,IAAI1B,IAAU,IAArC,IAEM2B,EAAkB,IAAI3B,IAAU,U,+CCPvC4B,E,KAAapJ,EAAOC,IAAV,4NAaDmJ,O,0JCsBTC,EAAW,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,IAErBC,EAAiB,SAACjG,GAC7B,IAAMb,EAAWC,cACTd,EAAYe,cAAZf,QACFD,EAAqBiB,cACrBW,EAAmBC,YAAYF,GAC/BkG,EAAaF,EAASG,SAASnG,GAqBrC,MAAO,CAAEoG,UAnBazG,sBAAW,uCAC/B,WAAOqF,GAAP,mBAAAzG,EAAA,yDACiB,IAAXyB,EADN,gCAEyBqG,YAAQhI,EAAoB,EAAG2G,EAAQ1G,GAFhE,OAEU6D,EAFV,OAGIqD,QAAQC,KAAKtD,GAHjB,2BAIa+D,EAJb,kCAKyBI,YAAoBrG,EAAkB+E,EAAQ1G,GALvE,QAKU6D,EALV,OAMIqD,QAAQC,KAAKtD,GANjB,yCAQyBoE,YAAYtG,EAAkB+E,EAAQ1G,GAR/D,QAQU6D,EARV,OASIqD,QAAQC,KAAKtD,GATjB,QAWEhD,EAASiG,YAAwBpF,EAAQ1B,IACzCa,EAAS+D,YAAkBlD,EAAQ1B,IACnCa,EAAS8D,YAAwBjD,EAAQ1B,IAb3C,4CAD+B,sDAgB/B,CAACA,EAASa,EAAU+G,EAAY7H,EAAoB4B,EAAkBD,MAM3DwG,IAtDI,SAAC/D,GAClB,IAAMtD,EAAWC,cACTd,EAAYe,cAAZf,QACFD,EAAqBiB,cAC3B,EAAqCC,cAA7BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,aAgBpB,MAAO,CAAE2G,UAdazG,sBAAW,uCAC/B,WAAOqF,EAAgBO,GAAvB,eAAAhH,EAAA,+EAEuB8H,YAAQhI,EAAoBoE,EAAKuC,EAAQ1G,EAASiH,GAFzE,OAEQpD,EAFR,OAGEhD,EAASW,YAAuBxB,IAChCkH,QAAQC,KAAKtD,GACb1C,EAAa,UAAU,mCALzB,gDAOED,EAAW,qBAAD,8CAPZ,yDAD+B,wDAW/B,CAAClB,EAASa,EAAUd,EAAoBoE,EAAKhD,EAAcD,O,6PCtBzDiH,EAAU9J,IAAOC,IAAV,sJAOD,qBAAGE,MAAkBC,OAAOM,WAIlCqJ,EAAkE,SAAC,GAA2B,IAAzBxC,EAAwB,EAAxBA,QAASyC,EAAe,EAAfA,SAClF,OACE,eAACF,EAAD,CAAS,aAAW,kCAAkCG,KAAK,SAAS1C,QAAS,kBAAMA,KAAnF,UACE,cAAC,IAAD,CAAM2C,MAAM,UAAUC,MAAI,EAA1B,SACGH,EAAW,OAAS,YAEtBA,EAAW,cAAC,IAAD,IAAoB,cAAC,IAAD,QAKtCD,EAAwBK,aAAe,CACrCJ,UAAU,GAGGD,I,4CAAAA,IChBAM,EAhBkB,SAAC,GAAmE,IAAjEC,EAAgE,EAAhEA,mBAAoBC,EAA4C,EAA5CA,iBAAkBC,EAA0B,EAA1BA,eAElEC,GAF4F,EAAV3E,IAEjD,QAArByE,EAA6B,MAAQD,EADvCI,KAEVC,EAAaH,EAFHE,IAYhB,MAAM,GAAN,OAAUD,EAAV,YAAuBE,ICInBb,EAAU9J,IAAOC,IAAV,iDAIP2K,EAAqB5K,YAAO6K,IAAP7K,CAAH,oOAGb,qBAAGG,MAAkBC,OAAO0K,QAQ3B,qBAAG3K,MAAkBC,OAAOM,WA4DzBqK,EAxD0C,SAAC,GAWnD,IAVLC,EAUI,EAVJA,YACAC,EASI,EATJA,eACAC,EAQI,EARJA,QACAC,EAOI,EAPJA,mBACAC,EAMI,EANJA,QACAd,EAKI,EALJA,mBACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,eACA1E,EAEI,EAFJA,IACAuF,EACI,EADJA,SAEMnE,EAAkBC,cAClBmE,EAAwBjB,EAAyB,CAAEC,qBAAoBC,mBAAkBC,iBAAgB1E,QAE3GyF,EAAmB,0CACnBC,EAAkB,yCAEtB,OAAQH,GACN,IAAK,OACHE,EAAmB,uCACnBC,EAAkB,sCAOtB,OACE,eAAC,EAAD,WACE,eAAC,IAAD,CAAMC,eAAe,gBAArB,UACE,eAAC,IAAD,WAAOvE,EAAgB,IAAK,SAA5B,OACA,cAAC0D,EAAD,CAAoBc,KAClBV,EAAW,UACNO,EADM,YACcf,EAAeE,KAD7B,UAGRc,EAHQ,YAGWF,GAJxB,SAMGF,QAGHF,GACA,eAAC,IAAD,CAAMO,eAAe,gBAArB,UACE,eAAC,IAAD,WAAOvE,EAAgB,GAAI,mBAA3B,OACA,cAAC,IAAD,UAAOiE,OAGX,cAAC,IAAD,CAAMM,eAAe,aAArB,SACE,cAAC,IAAD,CAAME,UAAQ,EAACD,KAAMT,EAAgBd,MAAM,EAA3C,SACGjD,EAAgB,IAAK,2B,SC1E1B4C,GAAU9J,YAAO4L,IAAP5L,CAAH,sEAMP6L,GAAgB7L,YAAO8L,IAAP9L,CAAH,oEA6BJ+L,GAxBuC,SAAC,GAOhD,IANLX,EAMI,EANJA,QACAY,EAKI,EALJA,WACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,YACAC,EACI,EADJA,WAEA,OACE,eAAC,GAAD,CAASX,eAAe,gBAAgBY,WAAW,SAASC,GAAG,OAA/D,UACE,cAAC,IAAD,CAAOC,IAAG,wBAAmBL,EAAnB,QAAoCM,IAAKL,EAAaM,MAAO,GAAIC,OAAQ,KACnF,eAAC,IAAD,CAAMC,cAAc,SAASN,WAAW,WAAxC,UACE,cAAC,IAAD,CAASC,GAAG,MAAZ,SAAmBlB,IACnB,eAAC,IAAD,CAAMK,eAAe,SAArB,UACkB,IAAfW,EAAmB,cAAC,IAAD,IAAe,KAEnC,cAACP,GAAD,CAAejE,QAAQ,UAAvB,SAAmCoE,OAE3B,MAAPC,EAAW,cAAC,IAAD,IAAe,Y,4GCwBtBW,GAjDmC,SAAC,GAAsG,IAApG5B,EAAmG,EAAnGA,YAAalE,EAAsF,EAAtFA,IAAK+F,EAAiF,EAAjFA,UAAWC,EAAsE,EAAtEA,UAAsE,IAA3DC,iBAA2D,MAA/C,GAA+C,MAA3CC,qBAA2C,MAA3B,GAA2B,MAAtB/F,oBAAsB,MAAP,EAAO,EACtJ,EAAsBgG,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACMnG,EAAkBC,cAClBmG,EAAcC,mBAAQ,WAC1B,OAAOC,aAAsB1G,EAAKkE,EAAcgC,OAAgBS,KAC/D,CAAC3G,EAAKkE,EAAagC,IAEhBU,EAAe1K,uBACnB,SAAC2K,GACCR,EAAOQ,EAAEC,cAAc5M,SAEzB,CAACmM,IAGGU,EAAkB7K,uBAAY,WAClCmK,EAAOG,KACN,CAACA,EAAaH,IAEjB,OACE,eAAC,IAAD,CAAOW,MAAK,UAAK5G,EAAgB,IAAK,WAA1B,YAAwC6F,EAAxC,WAA4DD,UAAWA,EAAnF,UACE,cAACjG,GAAA,EAAD,CACE7F,MAAOkM,EACPlG,YAAa6G,EACbhN,SAAU6M,EACV5G,IAAKwG,EACLvG,OAAQgG,EACR9F,aAAcA,IAEhB,eAACvC,GAAA,EAAD,WACE,cAAC,IAAD,CAAQkD,QAAQ,YAAYL,QAASuF,EAArC,SACG5F,EAAgB,IAAK,YAExB,cAAC,IAAD,CACE6G,SAAUX,GAAa,IAAI5F,IAAU0F,GAAKc,SAAW,IAAIxG,IAAU0F,GAAKe,oBAAoB,GAC5F1G,QAAO,wBAAE,uBAAA3F,EAAA,6DACPyL,GAAa,GADN,SAEDR,EAAUK,EAAKlC,EAAcgC,OAAgBS,GAF5C,OAGPJ,GAAa,GACbP,IAJO,2CAFX,SASGM,EAAYlG,EAAgB,IAAK,wBAA0BA,EAAgB,IAAK,oBCK5EgH,GAhDqC,SAAC,GAAmF,IAAjFlD,EAAgF,EAAhFA,YAAa6B,EAAmE,EAAnEA,UAAWC,EAAwD,EAAxDA,UAAWhG,EAA6C,EAA7CA,IAA6C,IAAxCiG,iBAAwC,MAA5B,GAA4B,MAAxBC,qBAAwB,MAAR,GAAQ,EACrI,EAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACMnG,EAAkBC,cAClBmG,EAAcC,mBAAQ,WAC1B,OAAOC,aAAsB1G,EAAKkE,EAAcgC,OAAgBS,KAC/D,CAAC3G,EAAKkE,EAAagC,IAEhBU,EAAe1K,uBACnB,SAAC2K,GACCR,EAAOQ,EAAEC,cAAc5M,SAEzB,CAACmM,IAGGU,EAAkB7K,uBAAY,WAClCmK,EAAOG,KACN,CAACA,EAAaH,IAEjB,OACE,eAAC,IAAD,CAAOW,MAAK,mBAAcf,GAAaD,UAAWA,EAAlD,UACE,cAACjG,GAAA,EAAD,CACEG,YAAa6G,EACbhN,SAAU6M,EACV1M,MAAOkM,EACPpG,IAAKwG,EACLvG,OAAQgG,IAEV,eAACrI,GAAA,EAAD,WACE,cAAC,IAAD,CAAQkD,QAAQ,YAAYL,QAASuF,EAArC,SACG5F,EAAgB,IAAK,YAExB,cAAC,IAAD,CACE6G,SAAUX,GAAa,IAAI5F,IAAU0F,GAAKc,SAAW,IAAIxG,IAAU0F,GAAKe,oBAAoB,GAC5F1G,QAAO,wBAAE,uBAAA3F,EAAA,6DACPyL,GAAa,GADN,SAEDR,EAAUK,EAAKlC,EAAcgC,OAAgBS,GAF5C,OAGPJ,GAAa,GACbP,IAJO,2CAFX,SASGM,EAAYlG,EAAgB,IAAK,wBAA0BA,EAAgB,IAAK,oBCnCrFiH,GAAoBnO,IAAOC,IAAV,8EAMjBmO,GAAQpO,IAAOC,IAAV,mGACA,qBAAGE,MAAkBC,OAAO2I,cAMjCsF,GAAYrO,IAAOC,IAAV,oKAiFAqO,GAzEqC,SAAC,GAU9C,IATLtD,EASI,EATJA,YACAuD,EAQI,EARJA,cACAC,EAOI,EAPJA,aACAxB,EAMI,EANJA,cACAD,EAKI,EALJA,UACAjH,EAII,EAJJA,IACAmB,EAGI,EAHJA,aACAwH,EAEI,EAFJA,UACAC,EACI,EADJA,mBAEMxH,EAAkBC,cAChBuB,EAAYC,aAAS7C,GAArB4C,QACAe,EAAcI,aAAW/D,GAAzB2D,UAEFkF,EAAmBC,aAAiBL,EAAevB,GACnD6B,EAAwBC,WAAWH,EAAiBI,YAAY,IAChEC,EAAiBC,aAAmBJ,GAIpCK,EAFgBN,aAAiBH,EAAWzD,EAAcgC,EAAgB0B,GAG1ES,EAAaF,aAAmBC,GAEtC,EAA2BE,YACzB,cAAC,GAAD,CAAcpE,YAAaA,EAAalE,IAAK0H,EAAc3B,UAAWnE,EAASqE,UAAWA,EAAWC,cAAeA,EAAe/F,aAAcA,KAD5IoI,EAAP,oBAGA,EAA4BD,YAC1B,cAAC,GAAD,CAAepE,YAAaA,EAAclE,IAAKyH,EAAe1B,UAAWpD,EAAWsD,UAAWA,EAAWC,cAAeA,KADpHsC,EAAP,oBAmBA,OACE,eAAC,IAAD,CAAM7D,eAAe,gBAAgBY,WAAW,SAAhD,UACE,eAAC,IAAD,CAASnC,MAAiC,IAA1B2E,EAA8B,eAAiB,OAA/D,UACE,eAACR,GAAD,WACGW,EACAH,EAAwB,MAASA,EAAsB,EACtD,eAACT,GAAD,WAAQ,KAAR,IAAeS,EAAsBU,cAAc,GAAGC,MAAM,KAAK,GAAGlI,oBAEpE,KACC,OACQ,IACb,cAAC+G,GAAD,UACGI,EAAUgB,GAAG,GAAK,eAACrB,GAAD,gBAClBe,EACAD,EAAsB,MAASA,EAAoB,EAClD,eAACd,GAAD,WAAQ,KAAR,IAAec,EAAoBK,cAAc,GAAGC,MAAM,KAAK,GAAGlI,oBAElE,KAED,IAPkB,UAOC,UAjCE,IAArBqH,EACL,cAAC,IAAD,CAAQpH,QAAS8H,EAAjB,SAAoCnI,EAAgB,IAAK,WAEzD,eAACiH,GAAD,WACE,cAAC,IAAD,CAAYvG,QAAQ,WAAWL,QAAS+H,EAAmBI,GAAG,MAA9D,SACE,cAAC,IAAD,CAAWxF,MAAM,cAEnB,cAAC,IAAD,CAAYtC,QAAQ,WAAWL,QAAS8H,EAAxC,SACE,cAAC,IAAD,CAASnF,MAAM,qB,UCrEnByF,GAAqB3P,IAAOC,IAAV,oIAMlBmO,GAAQpO,IAAOC,IAAV,+DACA,qBAAGE,MAAkBC,OAAO2I,cAiDxB6G,GA9CuC,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,SAAU/J,EAAuB,EAAvBA,IAAKgK,EAAkB,EAAlBA,YAChE5I,EAAkBC,cACxB,EAAkC8F,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACQ/H,EAAaF,aAAWU,GAAxBR,SACAoD,EAAYC,aAAS7C,GAArB4C,QAEFqH,EAAqBnB,aAAiBiB,GACtCb,EAAiBe,EAAmBzI,iBAE1C,OACE,eAAC,IAAD,CAAMgF,GAAG,MAAMb,eAAe,gBAAgBY,WAAW,SAAzD,UAEE,eAAC,IAAD,CAASnC,MAA8B,IAAvB6F,EAA2B,eAAiB,OAA5D,UAAqEf,EAAe,eAAC,GAAD,gBAAWc,EAAaE,QAAQ,GAAhC,aACpF,eAACL,GAAD,WACW,KAAR7J,EAEC,cAAC,IAAD,CACEiI,SAAiC,IAAvBgC,GAA4B3C,EACtClJ,KAAK,KACL0D,QAAQ,WACRqI,aAAa,OACb1I,QAAO,wBAAE,uBAAA3F,EAAA,6DACPyL,GAAa,GADN,SAED3E,EAAQqH,EAAmBrI,WAAY,IAFtC,OAGP2F,GAAa,GAHN,2CALX,SAWGnG,EAAgB,IAAK,cAEtB,KACJ,cAAC,IAAD,CACE6G,SAAiC,IAAvBgC,GAA4B3C,EACtC7F,QAAO,wBAAE,uBAAA3F,EAAA,6DACPyL,GAAa,GADN,SAED/H,IAFC,OAGP+H,GAAa,GAHN,2CAFX,SASGnG,EAAgB,IAAK,oBClD1BgJ,GAASlQ,IAAOC,IAAV,kDAqGGkQ,IAlGcnQ,YAAOoQ,IAAPpQ,CAAH,iDAc0B,SAAC,GAA6C,IAA3CqQ,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,SAAU3O,EAA0B,EAA1BA,QAAS4O,EAAiB,EAAjBA,WACxErJ,EAAkBC,cAExB,EAAkD8F,oBAAS,GAA3D,mBAAOuD,EAAP,KAA0BC,EAA1B,KACA,EAAwEC,YAAeL,EAAKvK,KAApFA,EAAR,EAAQA,IAAK6K,EAAb,EAAaA,YAAanG,EAA1B,EAA0BA,eAAgBQ,EAA1C,EAA0CA,YAAa/D,EAAvD,EAAuDA,aACvD,EAA6D2J,YAAY9K,GAAjEhE,EAAR,EAAQA,UAAW0M,EAAnB,EAAmBA,aAAcD,EAAjC,EAAiCA,cAAesB,EAAhD,EAAgDA,SAC1CgB,EAAYF,EAAYjG,IACxBxI,EAAesI,EAAeE,IAC9BoG,EAAST,EAAKU,SAASC,cACvBC,EAAatP,GAAWG,GAAaA,EAAUoP,cAAc,GAC7DC,EAAYC,cACZ3P,EAAa8L,mBAAQ,WACzB,OAAIvC,EACK/J,aAAYqP,EAAsBpO,GAEpCjB,aAAYqP,EAAsBO,KACxC,CAACP,EAAUO,EAAW3O,EAAc8I,IAK/BjI,EAAcR,aAAWd,GAAzBsB,UAEFsO,EAAgBrO,sBAAW,wBAAC,uBAAApB,EAAA,sEAE9B6O,GAAqB,GAFS,SAGxB1N,IAHwB,OAI9B0N,GAAqB,GAJS,gDAM9B5H,QAAQyI,MAAR,MAN8B,yDAQ/B,CAACvO,IAEA0L,EAAYF,EAEZgC,IACF9B,EAAYA,EAAUhH,MAAM,IAAID,IAAU+I,GAAYtQ,IAAIoQ,EAAKkB,iBAuBjE,OACE,eAACrB,GAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAM/F,MAAI,EAACqH,cAAc,YAAYtH,MAAM,YAAYuH,SAAS,OAAOC,GAAG,MAA1E,mBAIA,cAAC,IAAD,CAAMvH,MAAI,EAACqH,cAAc,YAAYtH,MAAM,aAAauH,SAAS,OAAjE,SACGvK,EAAgB,IAAK,eAG1B,cAAC,GAAD,CAAe2I,SAAUA,EAAU/J,IAAKA,EAAKgK,YAAaqB,EAAUQ,aAAa9B,EAAS+B,UAAT,SAAmB,GAAM,QAC1G,eAAC,IAAD,WACE,cAAC,IAAD,CAAMzH,MAAI,EAACqH,cAAc,YAAYtH,MAAM,YAAYuH,SAAS,OAAOC,GAAG,MAA1E,SACGZ,IAEH,cAAC,IAAD,CAAM3G,MAAI,EAACqH,cAAc,YAAYtH,MAAM,aAAauH,SAAS,OAAjE,SACGvK,EAAgB,IAAK,eAGxBvF,EAvCGsP,EACL,cAAC,GAAD,CACEjG,YAAaA,EACbuD,cAAeA,EACfC,aAAcA,EACdxB,cAAeqD,EAAKrD,cACpBD,UAAW+D,EACXhL,IAAKA,EACLmB,aAAcA,EACdwH,UAAWA,EACXC,mBAAoB2B,EAAK3B,qBAG3B,cAAC,IAAD,CAAQmD,GAAG,MAAMC,WAAS,EAAC/D,SAAUyC,EAAmBjJ,QAAS8J,EAAjE,SACGnK,EAAgB,IAAK,sBAyBZ,cAAC6K,GAAA,EAAD,CAAcF,GAAG,MAAMC,WAAS,SC5GrCE,GAAwC,SAAC,GAA0C,IAF1EC,EAEkCC,EAAuC,EAAvCA,aAIhDC,EAJuF,EAAzBC,QAIrC,IACzBC,EAAsBH,EAHJ,IAKlBI,EAAY,IAP2E,EAAhBnB,UAUvEoB,EAAcD,EAAS,SAAI,EAAIH,EARb,QAQmEE,GAI3F,OAhBoBJ,EAeGM,EAAcD,EAfNE,KAAKC,MAAe,IAATR,GAAgB,KAmB/CS,GAAc,SAAC,GAE1B,OAF+D,EAAnCC,aAAmC,EAArBC,eACW,KACnC5C,QAAQ,ICDtB6C,GAAO7S,IAAOC,IAAV,wJAOJ6S,GAAW9S,IAAOC,IAAV,sDAIR8S,GAAc/S,YAAOgT,IAAPhT,CAAH,yEA2GFiT,GAtG+C,SAAC,GASxD,IARLnG,EAQI,EARJA,UACA1B,EAOI,EAPJA,QACAd,EAMI,EANJA,mBACAC,EAKI,EALJA,iBACAC,EAII,EAJJA,eACA2G,EAGI,EAHJA,UACA+B,EAEI,EAFJA,IACApN,EACI,EADJA,IAEMoB,EAAkBC,cAClBmE,EAAwBjB,EAAyB,CAAEC,qBAAoBC,mBAAkBC,iBAAgB1E,QACzGsM,EAAUc,EAAIzL,MAAM,IAAID,IAAU,MAAM2L,WACxCC,EAAgC,IAAOjC,EAAUgC,WAEjDE,EAA0BrB,GAAsC,CAAEE,aAAc,EAAGE,UAASjB,cAC5FmC,EAA0BtB,GAAsC,CAAEE,aAAc,EAAGE,UAASjB,cAC5FoC,EAA2BvB,GAAsC,CAAEE,aAAc,GAAIE,UAASjB,cAC9FqC,EAA4BxB,GAAsC,CAAEE,aAAc,IAAKE,UAASjB,cAEtG,OACE,eAAC,IAAD,CAAOrD,MAAM,MAAMhB,UAAWA,EAA9B,UACE,eAAC+F,GAAD,WACE,cAACC,GAAD,UACE,cAAC,IAAD,CAAMrB,SAAS,OAAOtH,MAAI,EAACD,MAAM,aAAasH,cAAc,YAAYlF,GAAG,OAA3E,SACGpF,EAAgB,IAAK,iBAG1B,cAAC4L,GAAD,UACE,cAAC,IAAD,CAAMrB,SAAS,OAAOtH,MAAI,EAACD,MAAM,aAAasH,cAAc,YAAYlF,GAAG,OAA3E,SACGpF,EAAgB,IAAK,WAG1B,cAAC4L,GAAD,UACE,cAAC,IAAD,CAAMrB,SAAS,OAAOtH,MAAI,EAACD,MAAM,aAAasH,cAAc,YAAYlF,GAAG,OAA3E,SACGpF,EAAgB,IAAK,uBAI1B,cAAC4L,GAAD,UACE,cAAC,IAAD,mBAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGJ,GAAY,CAAEC,aAAcU,EAAyBT,eAAgBQ,IADxE,SAIF,cAACN,GAAD,UACE,cAAC,IAAD,UAAOO,MAGT,cAACP,GAAD,UACE,cAAC,IAAD,mBAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGJ,GAAY,CAAEC,aAAcW,EAAyBV,eAAgBQ,IADxE,SAIF,cAACN,GAAD,UACE,cAAC,IAAD,UAAOQ,MAGT,cAACR,GAAD,UACE,cAAC,IAAD,oBAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGJ,GAAY,CAAEC,aAAcY,EAA0BX,eAAgBQ,IADzE,SAIF,cAACN,GAAD,UACE,cAAC,IAAD,UAAOS,MAGT,cAACT,GAAD,UACE,cAAC,IAAD,0BAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGJ,GAAY,CAAEC,aAAca,EAA2BZ,eAAgBQ,IAD1E,SAIF,cAACN,GAAD,UACE,cAAC,IAAD,UAAOU,SAGX,cAACT,GAAD,CAAatB,SAAS,OAAOvH,MAAM,aAAnC,SACGhD,EACC,IACA,sKAGJ,cAAC,IAAD,CAAMuE,eAAe,SAArB,SACE,eAAC,IAAD,CAAcC,KAAI,+CAA0CJ,GAA5D,UACGpE,EAAgB,IAAK,OADxB,IACiCkE,WCvF1BqI,GA5B6B,SAAC,GAQtC,IAPLrI,EAOI,EAPJA,QACAd,EAMI,EANJA,mBACAC,EAKI,EALJA,iBACAC,EAII,EAJJA,eACA2G,EAGI,EAHJA,UACA+B,EAEI,EAFJA,IACApN,EACI,EADJA,IAEA,EAA4BsJ,YAC1B,cAAC,GAAD,CACEhE,QAASA,EACTd,mBAAoBA,EACpBC,iBAAkBA,EAClBC,eAAgBA,EAChB2G,UAAWA,EACX+B,IAAKA,EACLpN,IAAKA,KARF4N,EAAP,oBAYA,OACE,cAAC,IAAD,CAAYnM,QAASmM,EAAmB9L,QAAQ,OAAO1D,KAAK,KAAKyP,GAAG,MAApE,SACE,cAAC,IAAD,OCpBAC,GAAeC,YAAH,8KAYZC,GAAmB9T,IAAOC,IAAV,0lBAcP2T,IAWTG,GAA0B/T,IAAOC,IAAV,ylBAcd2T,IAYTI,GAAQhU,IAAOC,IAAV,4WAE6B,SAACC,GAAD,OAAWA,EAAMC,MAAM8T,KAAKC,WAAWC,OAAO,SAAU,SAACjU,GAAD,OAAWA,EAAMC,MAAM8T,KAAKC,WAAWC,OAAO,SAYxIC,GAAUpU,IAAOC,IAAV,4GACS,qBAAGE,MAAkBC,OAAOiU,eAM5CC,GAAmBtU,IAAOC,IAAV,iEACV,SAACC,GAAD,OAAYA,EAAM8J,SAAW,OAAS,SAgJnCuK,GAnI2B,SAAC,GAA+D,IAA7DlE,EAA4D,EAA5DA,KAAMnF,EAAsD,EAAtDA,QAASiG,EAA6C,EAA7CA,UAAWqD,EAAkC,EAAlCA,SAAUlE,EAAwB,EAAxBA,SAAU3O,EAAc,EAAdA,QACnFuF,EAAkBC,cAExB,EAA0D8F,oBAAS,GAAnE,mBAAOwH,EAAP,KAA8BC,EAA9B,KAMMxI,EAAYmE,EAAKrF,YAAcqF,EAAKlE,YAAYwI,cAApC,UAAuDtE,EAAKlE,YAAYwI,cAAxE,YAAyFtE,EAAK9F,iBAAiBoK,eAE3HpE,EAAwBhD,mBAAQ,WACpC,OAAK8C,EAAKuE,oBAINvE,EAAK9F,mBAAqBsK,IAAWC,IAChCN,EAAS/M,MAAM4I,EAAKuE,qBAEzBvE,EAAK9F,mBAAqBsK,IAAWE,KAChC5D,EAAU1J,MAAM4I,EAAKuE,qBAGvBvE,EAAKuE,oBAVH,OAWR,CAACJ,EAAUrD,EAAWd,EAAKuE,oBAAqBvE,EAAK9F,mBAElDY,EAAqBoF,EAAU,WAC7ByE,OAAOzE,GAAYjJ,oBAAemG,EAAW,CAAEwH,sBAAuB,KAC1E,IAEE7J,EAAUiF,EAAKU,SAEjBmE,EAAU7E,EAAK6C,KAAO7C,EAAK6C,IAAIzL,MAAM,IAAID,IAAU,MAAM2L,WAAW7L,oBAAemG,EAAW,CAChG0H,sBAAuB,EACvBF,sBAAuB,IAQrBG,EAAYF,EANA,CACd,CAAElU,MAAO,IAAK+F,OAAQ,KACtB,CAAE/F,MAAO,IAAK+F,OAAQ,KACtB,CAAE/F,MAAO,IAAK+F,OAAQ,KACtB,CAAE/F,MAAO,KAAM+F,OAAQ,MAGjBsO,SAAQ,SAAAC,GACd,GAAGjF,EAAK6C,IAAIzL,MAAM,IAAID,IAAU,KAAK2L,YAAY1D,GAAG6F,EAAOtU,OAAO,CAKhE,IAAMuU,GAJNH,EAAY/E,EAAK6C,KAAO7C,EAAK6C,IAAIzL,MAAM,IAAID,IAAU,MAAMvH,IAAIqV,EAAOtU,OAAOmS,WAAW7L,oBAAemG,EAAW,CAChH0H,sBAAuB,EACvBF,sBAAuB,KAEDO,MAAM,2BAC9BJ,EAAU,GAAD,OAAIG,EAAM,IAAV,OAAeA,EAAM,GAArB,YAA2BD,EAAOvO,QAAlC,OAA2CwO,EAAM,QAI9DL,EAAUE,EAIV,IAAQ9K,EAAyE+F,EAAzE/F,mBAAoBC,EAAqD8F,EAArD9F,iBAAkBC,EAAmC6F,EAAnC7F,eAAgByB,EAAmBoE,EAAnBpE,KAAmBoE,EAAbU,SACpE,OACE,eAACiD,GAAD,WACwB,UAArB3D,EAAKlE,aAA2B,cAAC2H,GAAD,IAClB,MAAdzD,EAAKpE,MAAgB,cAAC8H,GAAD,IACtB,cAAC,GAAD,CACE3I,QAASA,EACTY,WAAYqE,EAAKrE,WACjBC,KAAMA,EACNG,WAAYiE,EAAKpJ,aACjBiF,UAAWA,EACXC,YAAakE,EAAKlE,eAElBjB,GACA,eAAC,IAAD,CAAMO,eAAe,gBAAgBY,WAAW,SAAhD,UACE,eAAC,IAAD,WAAOnF,EAAgB,IAAK,OAA5B,OACA,cAAC,IAAD,CAAMiD,MAAI,EAACsL,MAAO,CAAEC,QAAS,OAAQrJ,WAAY,UAAjD,SACGgE,EAAK6C,IACJ,qCACE,cAAC,GAAD,CACE9H,QAASA,EACTd,mBAAoBA,EACpBC,iBAAkBA,EAClBC,eAAgBA,EAChB2G,UAAWA,EACX+B,IAAK7C,EAAK6C,IACVpN,IAAKuK,EAAKvK,MAEXoP,EAVH,OAaA,cAAC,IAAD,CAAUxI,OAAQ,GAAID,MAAO,UAKrC,eAAC,IAAD,CAAMhB,eAAe,gBAArB,UACE,eAAC,IAAD,WAAOvE,EAAgB,IAAK,QAA5B,OACA,cAAC,IAAD,CAAMiD,MAAI,EAAV,SAjEY,aAmEd,eAAC,IAAD,CAAMsB,eAAe,gBAArB,UACE,eAAC,IAAD,CAAMgK,MAAO,CAAEhE,SAAU,QAAzB,UAAoCvK,EAAgB,MAAO,eAA3D,OACA,eAAC,IAAD,CAAMiD,MAAI,EAACsL,MAAO,CAAEhE,SAAU,QAA9B,UAA0CpB,EAAKpJ,aAAe,IAA9D,UAEF,cAAC0O,GAAD,CAAsBtF,KAAMA,EAAMC,SAAUA,EAAU3O,QAASA,EAAS4O,WAAYA,IACpF,cAAC6D,GAAD,IACA,cAAC,EAAD,CACE7M,QAAS,kBAAMmN,GAA0BD,IACzCzK,SAAUyK,IAEZ,cAACH,GAAD,CAAkBtK,SAAUyK,EAA5B,SACE,cAAC,EAAD,CACEvJ,QAASA,EACTF,YAAaqF,EAAKrF,YAClBC,eACEoF,EAAKrF,YAAL,oCAC+BqF,EAAK7F,eAAeE,KADnD,oCAG+B2F,EAAKM,YAAYjG,KAElDS,mBAAoBA,EACpBC,QAASA,EACTd,mBAAoBA,EACpBC,iBAAkBA,EAClBC,eAAgBA,EAChB1E,IAAKuK,EAAKvK,IACVuF,SAAUgF,EAAKhF,iB,SCrNVuK,GAtBQ,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACpC,EAAyBC,cAAjBC,EAAR,EAAQA,IAAKC,EAAb,EAAaA,QACP/O,EAAkBC,cAExB,OACE,eAAC,GAAD,WACE,eAAC+O,GAAD,WACE,cAAC,IAAD,CAAQC,QAASN,EAAYhV,SAAU,kBAAMiV,GAAeD,MAC5D,eAAC,IAAD,eAAQ3O,EAAgB,IAAK,qBAE/B,eAAC,IAAD,CAAYkP,YAAaH,EAAU,EAAI,EAAG/R,KAAK,KAAK0D,QAAQ,SAA5D,UACE,cAAC,IAAD,CAAgByO,GAAIC,KAAMC,GAAE,UAAKP,GAAjC,SACG9O,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAgBmP,GAAIC,KAAMC,GAAE,UAAKP,EAAL,YAA5B,SACG9O,EAAgB,IAAK,qBAS1B4C,GAAU9J,IAAOC,IAAV,0HAOPiW,GAAgBlW,IAAOC,IAAV,+JAMf+S,K,UCgFWwD,GApGqB,SAACC,GACnC,IAAQC,EAASX,cAATW,KACFxP,EAAkBC,cAClBwP,EAAUC,cACVzF,EAAYC,cACZoD,EAAWqC,cACjB,EAAuEnU,cAA/Df,EAAR,EAAQA,QAAS2O,EAAjB,EAAiBA,SACVwG,EAAaL,EAAbK,UAEDtU,EAAWC,cACTsU,EAAgBC,cAAhBD,YACRE,qBAAU,WACJtV,GACFa,EAASW,YAAuBxB,MAEjC,CAACA,EAASa,EAAUuU,IAEvB,MAAoC9J,oBAAS,GAA7C,mBAAO4I,EAAP,KAAmBC,EAAnB,KAEMoB,EAAcP,EAAQQ,QAAO,SAAC9G,GAAD,QAAYA,EAAKrF,gBAAkB8L,GAAiC,OAApBzG,EAAKrE,cAClFoL,EAAgBT,EAAQQ,QAAO,SAAC9G,GAAD,QAAYA,EAAKrF,gBAAkB8L,GAAiC,OAApBzG,EAAKrE,cAEpFqL,EAAkBH,EAAYC,QAClC,SAAC9G,GAAD,OAAUA,EAAKiH,UAAY,IAAI9P,IAAU6I,EAAKiH,SAAS/I,eAAe2C,cAAc,MAMhFqG,EAAYvU,uBAChB,SAACwU,EAAgBtM,GAyBf,OAvBqDsM,EAAevS,KAAI,SAACoL,GAIvE,IACMoH,EADqB,IAAIjQ,IAAU6I,EAAKqH,aAAe,GAAGjQ,MAAM,IAAID,IAAU6I,EAAKsH,aAAc1X,IAAI,IAAIuH,IAAU,IAAIoQ,IAAI,KACpFnQ,MAAM0B,KAC/C+J,EAAM/B,EAAU1J,MAAMgQ,GAEtBlH,EAAa,IAAI/I,IAAU6I,EAAKuE,qBAAuB,GAY3D,OAVIvE,EAAK9F,mBAAqBsK,IAAWC,MACvCvE,EAAaA,EAAW9I,MAAM+M,IAE5BnE,EAAK9F,mBAAqBsK,IAAWE,OACvCxE,EAAaA,EAAW9I,MAAM0J,IAG7BZ,EAAWsH,WAAW,GAAK,IAC5B3E,EAAMA,EAAIjT,IAAIsQ,IAET,2BAAKF,GAAZ,IAAkB6C,WAGSjO,KAAI,SAACoL,GAAD,OAC/B,cAAC,GAAD,CAEEA,KAAMA,EACNnF,QAASA,EACTsJ,SAAUA,EACVrD,UAAWA,EACXb,SAAUA,EACV3O,QAASA,GANJ0O,EAAKvK,UAUhB,CAAC0O,EAAU7S,EAASwP,EAAWb,IAGjC,OACE,eAACwH,EAAA,EAAD,WACE,cAAC,IAAD,CAASzB,GAAG,KAAKnS,KAAK,KAAKgG,MAAM,UAAUoC,GAAG,OAAOmJ,MAAO,CAAEsC,UAAW,UAAzE,SAEIjB,EACE5P,EAAgB,MAAO,8BAEzBA,EAAgB,IAAK,mCAGzB,cAAC,IAAD,CAASmP,GAAG,KAAKnM,MAAM,YAAYoC,GAAG,OAAOmJ,MAAO,CAAEsC,UAAW,UAAjE,SACG7Q,EAAgB,IAAO,+CAE1B,cAAC,GAAD,CAAgB2O,WAAYA,EAAYC,cAAeA,IACvD,gCACE,cAAC,KAAD,IACA,eAAClK,EAAA,EAAD,WACE,cAAC,IAAD,CAAOoM,OAAK,EAACtB,KAAI,UAAKA,GAAtB,SACgBa,EAAb1B,EAAuBwB,EAAoCH,GAAnB,KAE3C,cAAC,IAAD,CAAOc,OAAK,EAACtB,KAAI,UAAKA,EAAL,YAAjB,SACGa,EAAUH,GAAe","file":"static/js/9.2d904dea.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  startAdornment?: React.ReactNode\r\n  value: string\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  )\r\n}\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.input};\r\n  border-radius: ${(props) => props.theme.radii.default};\r\n  display: flex;\r\n  height: 72px;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`\r\n\r\nexport default Input\r\n","import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport useToast from 'hooks/useToast'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      toastSuccess(\"Success\", `Got approval!`);\r\n      return tx\r\n    } catch (e) {\r\n      toastError(\"An error occurred.\", `Did not get approval, please try again`);\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract, toastError, toastSuccess])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n\r\nexport const usePreSaleApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nexport default ModalActions\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useToast from 'hooks/useToast'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    try{\r\n      const txHash = await harvest(masterChefContract, farmPid, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      toastSuccess(\"Success\",\"Harvesting transaction confirmed\")\r\n      return txHash\r\n  } catch (e) {\r\n    toastError(\"An error occurred.\", `Harvesting unsuccessful, please try again`);\r\n    return false;\r\n  }\r\n  }, [account, dispatch, farmPid, masterChefContract, toastError, toastSuccess])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  \r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\nimport Input, { InputProps } from '../Input'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\r\n  const TranslateString = useI18n()\r\n  const useValue = value\r\n  const useMax = max\r\n\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {useMax.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\r\n       \r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"sm\" onClick={onSelectMax}>\r\n                {TranslateString(452, 'Max')}\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={useValue}\r\n      />\r\n      {depositFeeBP > 0 ? (\r\n        <StyledMaxText>\r\n          {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(useValue || 0).times(depositFeeBP / 10000).toString()}{' '}\r\n          {symbol}\r\n        </StyledMaxText>\r\n      ) : null}\r\n    </StyledTokenInput>\r\n  )\r\n}\r\n\r\nconst StyledTokenInput = styled.div``\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TokenInput\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\r\n\r\nconst NoFeeTag = () => (\r\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\r\n    No Fees\r\n  </Tag>\r\n)\r\n\r\nconst RiskTag = ({ risk }) => (\r\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\r\n    Risk {risk}\r\n  </Tag>\r\n)\r\n\r\n\r\nconst CoreTag = () => (\r\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\r\n    Core\r\n  </Tag>\r\n)\r\n\r\nconst CommunityTag = () => (\r\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\r\n    Community\r\n  </Tag>\r\n)\r\nconst SpecialTag = () => (\r\n  <Tag variant='textSubtle' outline startIcon={<VerifiedIcon />}>\r\n    SPECIAL\r\n  </Tag>\r\n)\r\n\r\nconst BinanceTag = () => (\r\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\r\n    Binance\r\n  </Tag>\r\n)\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag, SpecialTag }\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport useToast from 'hooks/useToast'\r\n\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      try {\r\n        const txHash = await stake(masterChefContract, pid, amount, account, decimals)\r\n        dispatch(fetchFarmUserDataAsync(account))\r\n        console.info(txHash)\r\n        toastSuccess(\"Success\",\"Staking transaction confirmed\")\r\n      } catch (e) {\r\n        toastError(\"An error occurred.\", `Transaction unsuccessful, please try again`);\r\n      }\r\n    },\r\n    [account, dispatch, masterChefContract, pid, toastSuccess, toastError],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n","import BigNumber from 'bignumber.js/bignumber'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nexport const CAKE_PER_BLOCK = new BigNumber(.2)\r\n// export const BLOCKS_PER_YEAR = new BigNumber(10512000)\r\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000) // 15017142 ?\r\nexport const BSC_BLOCK_TIME = 3\r\n\r\nexport const CAKE_POOL_PID = 0\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport useToast from 'hooks/useToast'\r\n\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      try {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account, decimals)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n      toastSuccess(\"Success\",\"Unstaking transaction confirmed\")\r\n    } catch (e) {\r\n      toastError(\"An error occurred.\", `Transaction unsuccessful, please try again`);\r\n    }\r\n    },\r\n    [account, dispatch, masterChefContract, pid, toastSuccess, toastError],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\r\n\r\nexport const useSousUnstake = (sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, pid }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\r\n  const secondPart = tokenAddresses[chainId]\r\n\r\n  // if(pid === 4){\r\n  //   // VERT-WETH\r\n  //   return `0x72572CCf5208b59f4BcC14e6653d8c31Cd1fC5a0/0x7ceb23fd6bc0add59e62ac25578270cff1b9f619`\r\n  // }\r\n  // if(pid === 12){\r\n  //   // VERT-ROUTE\r\n  //   return `0x72572CCf5208b59f4BcC14e6653d8c31Cd1fC5a0/0x16eccfdbb4ee1a85a33f3a9b21175cd7ae753db4`\r\n  // }\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport interface ExpandableSectionProps {\r\n  isTokenOnly?: boolean\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address,\r\n  pid: number,\r\n  exchange? : string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  isTokenOnly,\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  pid,\r\n  exchange\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, pid })\r\n\r\n  let swapURLFirstPart = \"https://exchange.lemonswap.space/#/swap\"\r\n  let addURLFirstPart = \"https://exchange.lemonswap.space/#/add\"\r\n\r\n  switch (exchange) {\r\n    case \"DFYN\":\r\n      swapURLFirstPart = \"https://exchange.dfyn.network/#/swap\"\r\n      addURLFirstPart = \"https://exchange.dfyn.network/#/add\"\r\n      break;\r\n    case \"QuickSwap\":\r\n    default:\r\n      break;\r\n  }\r\n  \r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={\r\n          isTokenOnly ?\r\n            `${swapURLFirstPart}/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n            :\r\n          `${addURLFirstPart}/${liquidityUrlPathParts}`\r\n        }>\r\n          {lpLabel}\r\n        </StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on bscscan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag, SpecialTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n  color: #ffffff;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  risk,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          <MultiplierTag variant=\"success\" >{multiplier}</MultiplierTag>\r\n        </Flex>\r\n          {risk===999?<SpecialTag/>: null}\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  isTokenOnly: boolean\r\n  max: BigNumber\r\n  onConfirm: (amount: string, decimals: number) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  tokenDecimals?: number\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ isTokenOnly, max, onConfirm, onDismiss, tokenName = '', tokenDecimals = 18 , depositFeeBP = 0}) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, isTokenOnly ? tokenDecimals : undefined)\r\n  }, [max, isTokenOnly, tokenDecimals])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || new BigNumber(val).isNaN() || new BigNumber(val).isLessThanOrEqualTo(0)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val, isTokenOnly ? tokenDecimals : undefined)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  isTokenOnly: boolean\r\n  max: BigNumber\r\n  onConfirm: (amount: string, decimals: number) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  tokenDecimals?: number\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ isTokenOnly, onConfirm, onDismiss, max, tokenName = '', tokenDecimals = 18}) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, isTokenOnly ? tokenDecimals : undefined)\r\n  }, [max, isTokenOnly, tokenDecimals])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || new BigNumber(val).isNaN() || new BigNumber(val).isLessThanOrEqualTo(0)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val, isTokenOnly ? tokenDecimals : undefined)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber, getCorrectedNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  isTokenOnly?: boolean\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenDecimals?: number\r\n  tokenName?: string\r\n  pid?: number\r\n  depositFeeBP?: number\r\n  usdStaked: BigNumber,\r\n  quoteTokenDecimals: number\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 12px;\r\n  align: left;\r\n  display: inline;\r\n`\r\n\r\nconst SciNumber = styled.div`\r\n  display: flex;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  justify-content:center;\r\n  align-items:baseline;\r\n  white-space: pre;\r\n`\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  isTokenOnly,\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenDecimals,\r\n  tokenName,\r\n  pid,\r\n  depositFeeBP,\r\n  usdStaked,\r\n  quoteTokenDecimals\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance, tokenDecimals);\r\n  const correctedStakeBalance = parseFloat(rawStakedBalance.toPrecision(4));\r\n  const displayBalance = getCorrectedNumber(correctedStakeBalance);\r\n\r\n  const rawDisplayUsd = getBalanceNumber(usdStaked, isTokenOnly ? tokenDecimals : quoteTokenDecimals)\r\n  // const correctedDisplayUsd = parseFloat(rawDisplayUsd.toPrecision(4));\r\n  const correctedDisplayUsd = rawDisplayUsd;\r\n  const displayUSD = getCorrectedNumber(correctedDisplayUsd);\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal isTokenOnly={isTokenOnly} max={tokenBalance} onConfirm={onStake} tokenName={tokenName} tokenDecimals={tokenDecimals} depositFeeBP={depositFeeBP} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal isTokenOnly={isTokenOnly}  max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} tokenDecimals={tokenDecimals}/>,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={correctedStakeBalance === 0 ? 'textDisabled' : 'text'}>\r\n        <SciNumber>\r\n          {displayBalance} \r\n          {correctedStakeBalance < 1e-5  && correctedStakeBalance>0 ? (\r\n            <Label>{'  '}e{correctedStakeBalance.toExponential(2).split('e')[1].toLocaleString()}</Label>\r\n          ) : (\r\n            null\r\n          )}{' '}\r\n        </SciNumber>{' '}\r\n        <SciNumber>\r\n          {usdStaked.gt(0) ? <Label>~$\r\n          {displayUSD} \r\n          {correctedDisplayUsd < 1e-5  && correctedDisplayUsd>0 ? (\r\n            <Label>{'  '}e{correctedDisplayUsd.toExponential(2).split('e')[1].toLocaleString()}</Label>\r\n          ) : (\r\n            null\r\n          )}\r\n          {' '} USD</Label> : null}\r\n        </SciNumber>\r\n      </Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport styled from 'styled-components'\r\nimport useStake from '../../../../hooks/useStake'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number,\r\n  usdEarnings: BigNumber\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 12px;\r\n`\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid, usdEarnings }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { onStake } = useStake(pid)\r\n\r\n  const rawEarningsBalance = getBalanceNumber(earnings)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n \r\n  return (\r\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\r\n        \r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}<Label>~${(usdEarnings).toFixed(2)} USD</Label></Heading>\r\n      <BalanceAndCompound>\r\n        {pid === 14 ?\r\n        // {false ?\r\n          <Button\r\n            disabled={rawEarningsBalance === 0 || pendingTx}\r\n            size='sm'\r\n            variant='tertiary'\r\n            marginBottom='15px'\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onStake(rawEarningsBalance.toString(), 18)\r\n              setPendingTx(false)\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Compound')}\r\n          </Button>\r\n          : null}\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n\r\n          {TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text, ToastContainer, toastTypes } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, useFarmUser, usePriceCakeBusd } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nconst ToastContainerSticky = styled(ToastContainer)`\r\n  position:absolute\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n  totalValue?: BigNumber\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account, totalValue }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const lpContract = useMemo(() => {\r\n    if (isTokenOnly) {\r\n      return getContract(ethereum as provider, tokenAddress)\r\n    }\r\n    return getContract(ethereum as provider, lpAddress)\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n\r\n\r\n  \r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  let usdStaked = stakedBalance\r\n\r\n  if (totalValue) {\r\n    usdStaked = usdStaked.times(new BigNumber(totalValue).div(farm.lpStakedTotal))\r\n  }\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        isTokenOnly={isTokenOnly}\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenDecimals={farm.tokenDecimals}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        depositFeeBP={depositFeeBP}\r\n        usdStaked={usdStaked}\r\n        quoteTokenDecimals={farm.quoteTokenDecimals}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(999, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          Lemon\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} usdEarnings={cakePrice.multipliedBy(earnings.dividedBy(10 ** 18))} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / cakePrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\nimport { Address } from 'config/constants/types'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address,\r\n  pid: number\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n  pid\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, pid })\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'Lemon per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={`https://exchange.lemonswap.app/#/add/${liquidityUrlPathParts}`}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\r\nimport { Address } from 'config/constants/types'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n  pid: number\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n  pid\r\n}) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      lpLabel={lpLabel}\r\n      quoteTokenAdresses={quoteTokenAdresses}\r\n      quoteTokenSymbol={quoteTokenSymbol}\r\n      tokenAddresses={tokenAddresses}\r\n      cakePrice={cakePrice}\r\n      apy={apy}\r\n      pid={pid}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(45deg,\r\n  rgba(255, 0, 0, 1) 0%,\r\n  rgba(255, 154, 0, 1) 10%,\r\n  rgba(208, 222, 33, 1) 20%,\r\n  rgba(79, 220, 74, 1) 30%,\r\n  rgba(63, 218, 216, 1) 40%,\r\n  rgba(47, 201, 226, 1) 50%,\r\n  rgba(28, 127, 238, 1) 60%,\r\n  rgba(95, 21, 242, 1) 70%,\r\n  rgba(186, 12, 248, 1) 80%,\r\n  rgba(251, 7, 217, 1) 90%,\r\n  rgba(255, 0, 0, 1) 100%);\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst StyledCardAccentSpecial = styled.div`\r\n  background: linear-gradient(45deg,\r\n  rgba(0, 255, 255, 1) 0%,\r\n  rgba(0, 101, 255, 1) 10%,\r\n  rgba(47, 255, 222, 1) 20%,\r\n  rgba(176, 35, 181, 1) 30%,\r\n  rgba(192, 37, 39, 1) 40%,\r\n  rgba(208, 54, 29, 1) 50%,\r\n  rgba(197, 98, 17, 1) 60%,\r\n  rgba(95, 234, 13, 1) 70%,\r\n  rgba(69, 243, 7, 1) 80%,\r\n  rgba(4, 248, 38, 1) 90%,\r\n  rgba(0, 255, 255, 1) 100%);\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\n// background: linear-gradient(to top,rgb(255,255,255,.6), rgb(255,255,255,1));\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: linear-gradient(to top, ${(props) => props.theme.card.background.concat(\"C8\")}, ${(props) => props.theme.card.background.concat(\"FF\")});\r\n\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n  \r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n       \r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n   \r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = 'LEMON'\r\n  let farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  })\r\n  const formats = [\r\n    { value: 1e3, symbol: \"K\" } , \r\n    { value: 1e6, symbol: \"M\" },\r\n    { value: 1e9, symbol: \"B\" },\r\n    { value: 1e12, symbol: \"T\" },\r\n  ];\r\n  let formatted = farmAPY;\r\n  formats.forEach(format => {\r\n    if(farm.apy.times(new BigNumber(100).toNumber()).gt(format.value)){\r\n      formatted = farm.apy && farm.apy.times(new BigNumber(100)).div(format.value).toNumber().toLocaleString(undefined, {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2,\r\n      })\r\n      const parts = formatted.match(/([\\D]*)([\\d.,]+)([\\D]*)/)\r\n      formatted=`${parts[1]}${parts[2]} ${format.symbol}${parts[3]}`\r\n    }\r\n  });\r\n\r\n  farmAPY = formatted;\r\n\r\n\r\n  \r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk, lpSymbol } = farm\r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'LEMON' && <StyledCardAccent />}\r\n      {farm.risk === 999 && <StyledCardAccentSpecial />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        risk={risk}\r\n        depositFee={farm.depositFeeBP}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent='space-between' alignItems='center'>\r\n          <Text>{TranslateString(352, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  quoteTokenAdresses={quoteTokenAdresses}\r\n                  quoteTokenSymbol={quoteTokenSymbol}\r\n                  tokenAddresses={tokenAddresses}\r\n                  cakePrice={cakePrice}\r\n                  apy={farm.apy}\r\n                  pid={farm.pid}\r\n                />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent='space-between'>\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between'>\r\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} totalValue={totalValue} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          bscScanAddress={\r\n            farm.isTokenOnly ?\r\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              :\r\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={quoteTokenAdresses}\r\n          quoteTokenSymbol={quoteTokenSymbol}\r\n          tokenAddresses={tokenAddresses}\r\n          pid={farm.pid}\r\n          exchange={farm.exchange}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ToggleWrapper>\r\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\r\n        <Text> {TranslateString(699, 'Staked only')}</Text>\r\n      </ToggleWrapper>\r\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(698, 'Active')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {TranslateString(700, 'Inactive')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 32px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd} from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const {tokenMode} = farmsProps;\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n        let apy = cakePrice.times(cakeRewardPerYear);\r\n        \r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\r\n        \r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice);\r\n        }\r\n        if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n          totalValue = totalValue.times(cakePrice);\r\n        }\r\n\r\n        if(totalValue.comparedTo(0) > 0){\r\n          apy = apy.div(totalValue);\r\n        }\r\n        return { ...farm, apy }\r\n      })\r\n      \r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {\r\n          tokenMode ?\r\n            TranslateString(10002, 'Stake tokens to earn Lemon')\r\n            :\r\n          TranslateString(320, 'Stake LP tokens to earn Lemon')\r\n        }\r\n      </Heading>\r\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {TranslateString(10000, 'Deposit Fee will be used to buyback Lemon')}\r\n      </Heading>\r\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\r\n      <div>\r\n        <Divider />\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList(inactiveFarms, true)}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n      {/* <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive /> */}\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}