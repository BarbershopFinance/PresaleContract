{"version":3,"sources":["views/Home/components/CardValue.tsx","utils/erc20.ts","hooks/useHarvest.ts","hooks/useTokenBalance.ts","views/Farms/components/Divider.tsx","hooks/useFarmsWithBalance.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/HomePageCountdown.tsx","views/Home/Home.tsx"],"names":["CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","useEffect","current","bold","color","getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","balance","useHarvest","farmPid","dispatch","useDispatch","useWallet","useMasterchef","useToast","toastError","toastSuccess","onReward","useCallback","harvest","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","useSousHarvest","sousId","isUsingBnb","sousChefContract","useSousChef","handleHarvest","soushHarvestBnb","soushHarvest","updateUserPendingReward","updateUserBalance","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","cakeContract","cakeABI","getCakeAddress","supply","BigNumber","fetchTotalSupply","useBurnedBalance","setBalance","bal","fetchBalance","useTokenBalance","ethereum","fastRefresh","res","styled","div","theme","colors","textSubtle","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","multicall","masterChefABI","rawResults","results","index","fetchBalances","CakeHarvestBalance","earningsSum","TranslateString","useI18n","style","lineHeight","CakeWalletBalance","cakeBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","Card","Block","TokenImageWrapper","CardImage","img","Label","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","eggPrice","usePriceCakeBusd","toNumber","earning","pow","balancesWithValue","filter","balanceType","farmWithBalance","harvestAllFarms","addWatchLemonToken","window","request","method","type","symbol","image","size","mb","src","alt","width","height","onClick","marginLeft","toFixed","id","disabled","length","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","burnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","eggPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","chrome","hourSeconds","daySeconds","timerProps","isPlaying","strokeWidth","trailColor","renderTime","dimension","time","className","StyledTimerCard","TimerBox","Layout","BaseLayout","mediaQueries","sm","lg","HomePageCountdown","remainingTime","Date","now","daysDuration","Math","ceil","initialRemainingTime","elapsedTime","onComplete","totalElapsedTime","Hero","Cards","Home","Page","as","Divider","FarmStakingCard"],"mappings":"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","file":"static/js/13.a1aacb98.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize} color='#ddd'>\r\n      {prefix}{countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useToast from 'hooks/useToast'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    try{\r\n      const txHash = await harvest(masterChefContract, farmPid, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      toastSuccess(\"Success\",\"Harvesting transaction confirmed\")\r\n      return txHash\r\n  } catch (e) {\r\n    toastError(\"An error occurred.\", `Harvesting unsuccessful, please try again`);\r\n    return false;\r\n  }\r\n  }, [account, dispatch, farmPid, masterChefContract, toastError, toastSuccess])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  \r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingLemon',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = ({earningsSum}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = ({ cakeBalance }) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingLemon',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getCakeAddress } from '../../../utils/addressHelpers'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/egg/2a.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst TokenImageWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const eggPrice = usePriceCakeBusd().toNumber()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n\r\n\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n         // TODO handle\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  const addWatchLemonToken = useCallback(async () => {\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    const provider = window.ethereum\r\n    if (provider) {\r\n      try {\r\n        // wasAdded is a boolean. Like any RPC method, an error may be thrown.\r\n        const wasAdded = await provider.request({\r\n          method: 'wallet_watchAsset',\r\n          params: {\r\n            type: 'ERC20',\r\n            options: {\r\n              address: '0x9477477CdDC4A05419A402A9754725Bc9Ee6a40e',\r\n              symbol: 'LEMON',\r\n              decimals: '18',\r\n              image:\r\n                'https://lemonswap.space/images/logo.png',\r\n            },\r\n          },\r\n        })\r\n\r\n        if (wasAdded) {\r\n          // console.log('Token was added')\r\n        }\r\n      } catch (error) {\r\n        // TODO: find a way to handle when the user rejects transaction or it fails\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <TokenImageWrapper>\r\n          <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\r\n          <Button onClick={addWatchLemonToken} size=\"sm\">\r\n              +{' '}\r\n              <img\r\n                style={{ marginLeft: 8 }}\r\n                width={16}\r\n                src=\"/images/metamask.png\"\r\n                alt=\"metamask logo\"\r\n              />\r\n          </Button>\r\n        </TokenImageWrapper>\r\n        <Block>\r\n          <Label>{TranslateString(544, 'Lemon to Harvest')}</Label>\r\n          <CakeHarvestBalance earningsSum={earningsSum}/>\r\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'Lemon in Wallet')}</Label>\r\n          <CakeWalletBalance cakeBalance={cakeBalance} />\r\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting Lemon')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  background-image: url(/images/egg/2aaa.png);\r\n  background-repeat: repeat;\r\n  background-position: right top;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const presaleAmount = 0;\r\n  const farms = useFarms();\r\n  const eggPrice = usePriceCakeBusd();\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance).minus(presaleAmount) : new BigNumber(0);\r\n  const cakeSupply = getBalanceNumber(circSupply);\r\n  const marketCap = eggPrice.times(circSupply);\r\n\r\n  let eggPerBlock = 0;\r\n  if(farms && farms[0] && farms[0].eggPerBlock){\r\n    eggPerBlock = new BigNumber(farms[0].eggPerBlock).div(new BigNumber(10).pow(18)).toNumber();\r\n  }\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(534, 'Lemon Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\r\n          {/* <CardValue fontSize=\"14px\" value={0} decimals={0} prefix=\"$\" /> */}\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\r\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(540, 'New Lemon/block')}</Text>\r\n          <Text bold fontSize=\"14px\">{eggPerBlock}</Text>\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalValue = useTotalValue();\r\n  // const tvl = totalValue.toFixed(2);\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {TranslateString(999, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        <>\r\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\r\n          {/* <Heading size=\"xl\"> */}\r\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\r\n          {/* </Heading> */}\r\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\r\n        </>\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms } from '../../../state/hooks'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  background-color: #ffd000;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </Heading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'LemonSwapFarm'\r\n          }}\r\n          options={{\r\n            height: '300',\r\n            chrome: \"noheader, nofooter\",\r\n            width: \"400\"\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","import React from 'react'\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\r\nimport { TranslateString } from 'utils/translateTextHelpers'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport styled from 'styled-components'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport { CardHeader, Heading, Link, BaseLayout, CardBody, Card } from '@pancakeswap-libs/uikit'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport useBlock from '../hooks/useBlock'\r\nimport getTimePeriods from '../utils/getTimePeriods'\r\nimport useBlockCountdown from '../hooks/useGetBlockCountdown'\r\n\r\nconst minuteSeconds = 60\r\nconst hourSeconds = 3600\r\nconst daySeconds = 86400\r\n\r\nconst timerProps = {\r\n  isPlaying: true,\r\n  size: 89,\r\n  strokeWidth: 8,\r\n  trailColor: '#E9EAEB',\r\n}\r\n\r\nconst renderTime = (dimension, time) => {\r\n  return (\r\n    <div className=\"time-wrapper\">\r\n      <div className=\"time\">{time}</div>\r\n      <div>{dimension}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst StyledTimerCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\n// eslint-disable-next-line no-bitwise\r\nconst getTimeSeconds = (time) => (minuteSeconds - time) | 0\r\n// eslint-disable-next-line no-bitwise\r\nconst getTimeMinutes = (time) => ((time % hourSeconds) / minuteSeconds) | 0\r\n// eslint-disable-next-line no-bitwise\r\nconst getTimeHours = (time) => ((time % daySeconds) / hourSeconds) | 0\r\n// eslint-disable-next-line no-bitwise\r\nconst getTimeDays = (time) => (time / daySeconds) | 0\r\n\r\n\r\nfunction secondsToDhms(sec) {\r\n    const days = Math.floor(sec / (3600*24));\r\n    const hours = Math.floor(sec % (3600*24) / 3600);\r\n    const minutes = Math.floor(sec % 3600 / 60);\r\n    const seconds = Math.floor(sec % 60);\r\n    return {days, hours, minutes, seconds};\r\n}\r\nconst TimerBox = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align: center;\r\n  font-family: sans-serif;\r\n  text-align: center;\r\n  margin-top:50px;\r\n`\r\n\r\nconst Layout = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 6;\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 3;\r\n    }\r\n  }\r\n`\r\n// START BLOCK: 15751269\r\n// END BLOCK: 18751269\r\n\r\n// const BEGIN_TIME = 1627887161; // Monday, August 2, 2021 4:00:00 PM GMT\r\nconst BEGIN_TIME = 1638201600; // Monday, August 2, 2021 4:00:00 PM GMT\r\nconst HomePageCountdown =() => {\r\n    // const currentBlock = useBlock();\r\n    const tarBlock = 15751269\r\n    const startTime = Date.now() / 1000\r\n    const remainingTime = (BEGIN_TIME - startTime);\r\n    const days = Math.ceil(remainingTime / daySeconds)\r\n\r\n    const daysDuration = days * daySeconds\r\n    return (\r\n      <StyledTimerCard>\r\n        <CardBody>\r\n          <Heading size=\"lg\" mb=\"24px\">\r\n            Presale Staring\r\n          </Heading>\r\n          <TimerBox>\r\n        <Layout>\r\n          <CountdownCircleTimer\r\n            {...timerProps}\r\n            colors=\"#ffd000\"\r\n            duration={daysDuration}\r\n            initialRemainingTime={remainingTime}\r\n          >\r\n            {({ elapsedTime }) => renderTime('days', getTimeDays(daysDuration - elapsedTime))}\r\n          </CountdownCircleTimer>\r\n          <CountdownCircleTimer\r\n            {...timerProps}\r\n            colors=\"#ffd000\"\r\n            duration={daySeconds}\r\n            initialRemainingTime={remainingTime % daySeconds}\r\n            onComplete={(totalElapsedTime) => [remainingTime - totalElapsedTime > hourSeconds, 10]}\r\n          >\r\n            {({ elapsedTime }) => renderTime('hours', getTimeHours(daySeconds - elapsedTime))}\r\n          </CountdownCircleTimer>\r\n          <CountdownCircleTimer\r\n            {...timerProps}\r\n            colors=\"#ffd000\"\r\n            duration={hourSeconds}\r\n            initialRemainingTime={remainingTime % hourSeconds}\r\n            onComplete={(totalElapsedTime) => [remainingTime - totalElapsedTime > minuteSeconds, 10]}\r\n          >\r\n            {({ elapsedTime }) => renderTime('minutes', getTimeMinutes(hourSeconds - elapsedTime))}\r\n          </CountdownCircleTimer>\r\n          <CountdownCircleTimer\r\n            {...timerProps}\r\n            colors=\"#ffd000\"\r\n            duration={minuteSeconds}\r\n            initialRemainingTime={remainingTime % minuteSeconds}\r\n            onComplete={(totalElapsedTime) => [remainingTime - totalElapsedTime > 0, 10]}\r\n          >\r\n            {({ elapsedTime }) => renderTime('seconds', getTimeSeconds(elapsedTime))}\r\n          </CountdownCircleTimer>\r\n        </Layout>\r\n        \r\n      </TimerBox>\r\n        </CardBody>\r\n      </StyledTimerCard>\r\n    )\r\n}\r\n\r\nexport default HomePageCountdown\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout , Button, ToastContainer} from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useToast from 'hooks/useToast'\r\nimport Page from 'components/layout/Page'\r\nimport Divider from 'views/Farms/components/Divider'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport LotteryCard from './components/LotteryCard'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\nimport SpecialCard from './components/SpecialCard'\r\nimport HomePageCountdown from '../HomePageCountdown'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/egg/3.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/egg/3.png'), url('/images/egg/3b.png');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 48px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\n\r\n\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {/* {TranslateString(576, 'lemonswap')} */}\r\n        </Heading>\r\n        <Text>{TranslateString(578, '')}</Text>\r\n      </Hero>\r\n      {/* <HomePageCountdown />       */}\r\n\r\n      <div>\r\n          <Divider/>\r\n          {/* <SpecialCard /> */}\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <TwitterCard/>\r\n          <HomePageCountdown />\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}