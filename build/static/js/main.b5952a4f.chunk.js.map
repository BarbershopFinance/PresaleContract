{"version":3,"sources":["contexts/ToastsContext/Provider.tsx","contexts/ToastsContext/Listener.tsx","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","hooks/useToast.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/actions.ts","hooks/useRefresh.ts","components/layout/Page.tsx","state/hooks.ts","contexts/Localisation/translationsContext.ts","components/layout/Container.tsx","config/constants/types.ts","config/constants/contracts.ts","contexts/BlockContext.tsx","utils/multicall.ts","utils/addressHelpers.ts","config/constants/pools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","components/PageLoader.tsx","style/Global.tsx","App.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["ToastsContext","createContext","undefined","ToastsProvider","children","useState","toasts","setToasts","toast","useCallback","title","description","type","action","prevToasts","id","kebabCase","currentToasts","filter","prevToast","Provider","value","clear","remove","toastError","toastTypes","DANGER","toastInfo","act","INFO","toastSuccess","SUCCESS","toastWarning","WARNING","ToastListener","useToast","onRemove","fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpStakedTotal","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","eggPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","toastContext","useContext","Error","nodes","process","getNodeUrl","randomIndex","random","length","RefreshContext","React","slow","fast","RefreshContextProvider","setSlow","setFast","useEffect","interval","setInterval","prev","clearInterval","useRefresh","fastRefresh","slowRefresh","Page","styled","Container","theme","mediaQueries","sm","lg","ZERO","useFetchPublicData","useDispatch","useFarms","useSelector","useFarmFromPid","useFarmUser","usePools","fetchPoolsUserDataAsync","pools","usePriceBnbBusd","usePriceCakeBusd","useTotalValue","bnbPrice","cakePrice","i","val","BNB","CAKE","plus","Infinity","defaultTranslationState","translations","setTranslations","TranslationsContext","PoolCategory","cake","masterChef","wbnb","lottery","lotteryNFT","mulltiCall","busd","usdt","weth","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","web3","getWeb3","eth","getBlockNumber","blockNumber","current","abi","multi","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","getCakeAddress","addresses","chainId","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","nonBnbPools","poolsConfig","p","stakingTokenName","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","fetchUserPendingRewards","pendingRewards","pendingLemon","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","lpSymbol","contracts","USDT","Wrapper","PageLoader","GlobalStyle","createGlobalStyle","isDark","Presale","lazy","NotFound","config","EXPONENTIAL_AT","DECIMAL_PLACES","App","useWallet","connect","window","localStorage","getItem","Math","Global","fallback","path","exact","component","memo","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","console","error","langObject","setItem","ThemeContext","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","light","lightBase","card","background","colors","modal","primary","primaryBright","secondary","tertiary","button","backgroundHover","dark","darkBase","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions"],"mappings":"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","file":"static/js/main.b5952a4f.chunk.js","sourcesContent":["import React, { createContext, ReactNode, useCallback, useState } from 'react'\r\nimport { kebabCase } from 'lodash'\r\nimport { Toast, toastTypes} from '@pancakeswap-libs/uikit'\r\nimport { ToastContextApi } from './types'\r\n\r\nexport const ToastsContext = createContext<ToastContextApi>(undefined)\r\nexport interface ToastAction {\r\n  text: string;\r\n  url: string;\r\n}\r\nexport const ToastsProvider: React.FC = ({ children }) => {\r\n  const [toasts, setToasts] = useState<ToastContextApi['toasts']>([])\r\n\r\n  const toast = useCallback(\r\n    ({ title, description, type, action }: Omit<Toast, 'id'>) => {\r\n      setToasts((prevToasts) => {\r\n        const id = kebabCase(title)\r\n        // Remove any existing toasts with the same id\r\n        const currentToasts = prevToasts.filter((prevToast) => prevToast.id !== id)\r\n\r\n        return [\r\n          {\r\n            id,\r\n            title,\r\n            description,\r\n            type,\r\n            action\r\n          },\r\n          ...currentToasts,\r\n        ]\r\n      })\r\n    },\r\n    [setToasts],\r\n  )\r\n\r\n  const toastError = (title: string, description?: string) => {\r\n    return toast({ title, description, type: toastTypes.DANGER })\r\n  }\r\n  const toastInfo = (title: string, description?: string, act?: ToastAction) => {\r\n    return toast({ title, description, type: toastTypes.INFO, action:act})\r\n  }\r\n\r\n  const toastSuccess = (title: string, description?: string, act?: ToastAction) => {\r\n    return toast({ title, description, type: toastTypes.SUCCESS, action:act})\r\n  }\r\n  const toastWarning = (title: string, description?: string) => {\r\n    return toast({ title, description, type: toastTypes.WARNING })\r\n  }\r\n  const clear = () => setToasts([])\r\n  const remove = (id: string) => {\r\n    setToasts((prevToasts) => prevToasts.filter((prevToast) => prevToast.id !== id))\r\n  }\r\n\r\n  return (\r\n    <ToastsContext.Provider value={{ toasts, clear, remove, toastError, toastInfo, toastSuccess, toastWarning}}>\r\n      {children}\r\n    </ToastsContext.Provider>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ToastContainer } from '@pancakeswap-libs/uikit'\r\nimport useToast from 'hooks/useToast'\r\n\r\nconst ToastListener = () => {\r\n  const { toasts, remove } = useToast()\r\n\r\n  const handleRemove = (id: string) => remove(id)\r\n\r\n  return <ToastContainer toasts={toasts} onRemove={handleRemove} />\r\n}\r\n\r\nexport default ToastListener","import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n  \r\n\r\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBlanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals\r\n      ] = await multicall(erc20, calls)\r\n\r\n      let tokenAmount;\r\n      let lpTotalInQuoteToken;\r\n      let lpStakedTotal;\r\n      let tokenPriceVsQuote;\r\n\r\n      if(farmConfig.isTokenOnly){\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\r\n        \r\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\r\n          tokenPriceVsQuote = new BigNumber(1);          \r\n        } else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).div(new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)));\r\n        }\r\n        \r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\r\n        \r\n        lpStakedTotal = tokenAmount;\r\n      } else {\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP)\r\n          .div(new BigNumber(10).pow(tokenDecimals))\r\n          .times(lpTokenRatio)\r\n        \r\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n          if(tokenAmount.comparedTo(0) > 0){\r\n            tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\r\n          } \r\n          else{\r\n            tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n          }\r\n        lpStakedTotal = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(quoteTokenDecimals))        \r\n      }\r\n\r\n\r\n      const [info, totalAllocPoint, eggPerBlock] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'LemonPerBlock',\r\n        },\r\n      ])\r\n\r\n      \r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount,\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        poolWeight: poolWeight.toNumber(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        eggPerBlock: new BigNumber(eggPerBlock).toNumber(),\r\n        lpStakedTotal: lpStakedTotal.toJSON(),\r\n        tokenDecimals: new BigNumber(tokenDecimals).toNumber(),\r\n        quoteTokenDecimals: new BigNumber(quoteTokenDecimals).toNumber(),\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchFarmUserAllowances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string) => {\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'pendingLemon',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport fetchFarms from './fetchFarms'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst initialState: FarmsState = { data: [...farmsConfig] }\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setFarmsPublicData: (state, action) => {\r\n      const liveFarmsData: Farm[] = action.payload\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    },\r\n    setFarmUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\r\n  const farms = await fetchFarms()\r\n  dispatch(setFarmsPublicData(farms))\r\n}\r\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\r\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\r\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\r\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\r\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\r\n\r\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\r\n    return {\r\n      index,\r\n      allowance: userFarmAllowances[index],\r\n      tokenBalance: userFarmTokenBalances[index],\r\n      stakedBalance: userStakedBalances[index],\r\n      earnings: userFarmEarnings[index],\r\n    }\r\n  })\r\n\r\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport default farmsSlice.reducer\r\n","import { useContext } from 'react'\r\nimport { ToastsContext } from 'contexts/ToastsContext'\r\n\r\nconst useToast = () => {\r\n  const toastContext = useContext(ToastsContext)\r\n\r\n  if (toastContext === undefined) {\r\n    throw new Error('Toasts context undefined')\r\n  }\r\n\r\n  return toastContext\r\n}\r\n\r\nexport default useToast\r\n","import random from 'lodash/random'\r\n\r\n// Array of available nodes to connect to\r\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\n\r\nconst getNodeUrl = () => {\r\n  const randomIndex = random(0, nodes.length - 1)\r\n  return nodes[randomIndex]\r\n}\r\n\r\nexport default getNodeUrl\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\r\nexport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  updateUserAllowance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n  updateUserStakedBalance,\r\n} from './pools'\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n","import styled from 'styled-components'\r\nimport Container from './Container'\r\n\r\nconst Page = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default Page\r\n","import BigNumber from 'bignumber.js'\r\nimport axios from 'axios'\r\nimport React, { useEffect, useMemo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\r\nimport { State, Farm, Pool } from './types'\r\nimport { QuoteToken } from '../config/constants/types'\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    // dispatch(fetchPoolsPublicDataAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): Farm[] => {\r\n  const farms = useSelector((state: State) => state.farms.data)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\n// Prices\r\nconst useFetch = (url, options) => {\r\n  const [data, setData] = React.useState({ response:null, route:null, ethereum: null, polyvertex:null, bitcoin:null, aave:null});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await axios(\r\n        url,\r\n      );\r\n \r\n      setData(result.data);\r\n    };\r\n \r\n    fetchData();\r\n  }, [url]);\r\n  const err = null;\r\n  return {data, err};\r\n};\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const pid = 5 // BUSD-BNB LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  const pid = 0; // EGG-BUSD LP\r\n  const farm = useFarmFromPid(pid);\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\r\n  // return new BigNumber(0);\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  const farms = useFarms();\r\n  const bnbPrice = usePriceBnbBusd();\r\n  const cakePrice = usePriceCakeBusd();\r\n  let value = new BigNumber(0);\r\n  for (let i = 0; i < farms.length; i++) {\r\n    const farm = farms[i]\r\n    if (farm.lpTotalInQuoteToken) {\r\n      let val;\r\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\r\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\r\n      }else{\r\n        val = (farm.lpTotalInQuoteToken); // USDC etc\r\n      }\r\n      value = value.plus(val);\r\n    }\r\n  }\r\n  const output = value.toString() === Infinity.toString() ? new BigNumber(0): value;\r\n  return output;\r\n}","import React, { createContext } from 'react'\r\n\r\nexport interface TranslationState {\r\n  translations: Array<any>\r\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\r\n}\r\n\r\nconst defaultTranslationState: TranslationState = {\r\n  translations: [],\r\n  setTranslations: (): void => undefined,\r\n}\r\n\r\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 992px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nexport default Container\r\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  subTitle?: string\r\n  description?: string\r\n  launchDate: string\r\n  launchTime: string\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  projectSiteUrl: string\r\n  currency: string\r\n  currencyAddress: string\r\n  tokenDecimals: number\r\n  releaseBlockNumber: number\r\n}\r\n\r\nexport enum QuoteToken {\r\n  'BNB' = 'BNB',\r\n  'WETH' = 'WETH',\r\n  'CAKE' = 'CAKE',\r\n  'SYRUP' = 'SYRUP',\r\n  'BUSD' = 'BUSD',\r\n  'USDT' = 'USDT',\r\n  'TWT' = 'TWT',\r\n  'UST' = 'UST',\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n}\r\n\r\nexport interface Address {\r\n  97?: string\r\n  56: string\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  tokenSymbol: string\r\n  tokenAddresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  quoteTokenAdresses: Address\r\n  multiplier?: string\r\n  isTokenOnly?: boolean\r\n  isCommunity?: boolean\r\n  risk: number\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n  exchange?:string\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number\r\n  image?: string\r\n  tokenName: string\r\n  stakingTokenName: QuoteToken\r\n  stakingLimit?: number\r\n  stakingTokenAddress?: string\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  projectLink: string\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  tokenDecimals: number\r\n}\r\n\r\nexport type Nft = {\r\n  name: string\r\n  description: string\r\n  originalImage: string\r\n  previewImage: string\r\n  blurImage: string\r\n  sortOrder: number\r\n  bunnyId: number\r\n}\r\n","export default {\r\n  cake: {\r\n    56: '0x9477477CdDC4A05419A402A9754725Bc9Ee6a40e',\r\n    97: '',\r\n  },\r\n  masterChef: {\r\n    56: '0xD2C91aA7ffAb4CE218f7F6fc9AED7029A57C4B97',\r\n    97: '',\r\n  },\r\n  wbnb: {\r\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    97: '',\r\n  },\r\n  lottery: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  lotteryNFT: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  mulltiCall: {\r\n    56: '0x1Ee38d535d541c55C9dae27B12edf090C608E6Fb',\r\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\r\n  },\r\n  busd: {\r\n    56: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\r\n    97: '',\r\n  },\r\n  usdt: {\r\n    56: '0x55d398326f99059fF775485246999027B3197955',\r\n    97: '',\r\n  },\r\n  weth: {\r\n    56: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n    97: '',\r\n  },\r\n}","import React, { useState, useEffect, useRef } from 'react'\r\nimport { getWeb3 } from 'utils/web3'\r\n\r\nconst BlockContext = React.createContext(0)\r\n\r\nconst BlockContextProvider = ({ children }) => {\r\n  const previousBlock = useRef(0)\r\n  const [block, setBlock] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const web3 = getWeb3()\r\n    const interval = setInterval(async () => {\r\n      const blockNumber = await web3.eth.getBlockNumber()\r\n      if (blockNumber !== previousBlock.current) {\r\n        previousBlock.current = blockNumber\r\n        setBlock(blockNumber)\r\n      }\r\n    }, 6000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\r\n}\r\n\r\nexport { BlockContext, BlockContextProvider }\r\n","import { AbiItem } from 'web3-utils'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\n\r\ninterface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (exemple: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\nconst multicall = async (abi: any[], calls: Call[]) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const { returnData } = await multi.methods.aggregate(calldata).call()\r\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","import addresses from 'config/constants/contracts'\r\n\r\nconst chainId = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const getCakeAddress = () => {\r\n  return addresses.cake[chainId]\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return addresses.masterChef[chainId]\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return addresses.mulltiCall[chainId]\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return addresses.wbnb[chainId]\r\n}\r\nexport const getLotteryAddress = () => {\r\n  return addresses.lottery[chainId]\r\n}\r\nexport const getLotteryTicketAddress = () => {\r\n  return addresses.lotteryNFT[chainId]\r\n}\r\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\r\n\r\nconst pools: PoolConfig[] = [\r\n  // {\r\n  //   sousId: 0,\r\n  //   tokenName: 'CAKE',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n  //   contractAddress: {\r\n  //     80001: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n  //     137: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://pancakeswap.finance/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '10',\r\n  //   sortOrder: 1,\r\n  //   isFinished: false,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n  // {\r\n  //   sousId: 1,\r\n  //   tokenName: 'TWT',\r\n  //   stakingTokenName: QuoteToken.SYRUP,\r\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\r\n  //   contractAddress: {\r\n  //     80001: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //     137: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://trustwallet.com/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '20',\r\n  //   sortOrder: 999,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n]\r\n\r\nexport default pools\r\n","import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingLemon('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStatking()\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","import contracts from './contracts'\r\nimport { FarmConfig, QuoteToken } from './types'\r\n\r\nconst farms: FarmConfig[] = [\r\n  {\r\n    pid: 0,\r\n    risk: 5,\r\n    lpSymbol: 'LEMON-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xe48f4d27B7290acFe339E6eB876771ab0B93554a',\r\n    },\r\n    tokenSymbol: 'LEMON',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x9477477CdDC4A05419A402A9754725Bc9Ee6a40e',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 1,\r\n    risk: 5,\r\n    lpSymbol: 'LEMON-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xC287c3792EEFDE1c99b4174Eb1360e7E1fFdD488',\r\n    },\r\n    tokenSymbol: 'LEMON',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x9477477CdDC4A05419A402A9754725Bc9Ee6a40e',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 2,\r\n    risk: 3,\r\n    lpSymbol: 'BUSD-USDT LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7EFaEf62fDdCCa950418312c6C91Aef321375A00',\r\n    },\r\n    tokenSymbol: 'USDT',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x55d398326f99059fF775485246999027B3197955',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 3,\r\n    risk: 1,\r\n    lpSymbol: 'BNB-BTCB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x61EB789d75A95CAa3fF50ed7E47b96c132fEc082',\r\n    },\r\n    tokenSymbol: 'BTCB',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 4,\r\n    risk: 1,\r\n    lpSymbol: 'BNB-USDT LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4160910ca32eAD83B6d4b32107974397D2579c2d',\r\n    },\r\n    tokenSymbol: 'USDT',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x55d398326f99059fF775485246999027B3197955',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 5,\r\n    risk: 3,\r\n    lpSymbol: 'BNB-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16',\r\n    },\r\n    tokenSymbol: 'BNB',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 6,\r\n    risk: 5,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'LEMON',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xe48f4d27B7290acFe339E6eB876771ab0B93554a', // LEMON-BUSD LP\r\n    },\r\n    tokenSymbol: 'LEMON',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x9477477CdDC4A05419A402A9754725Bc9Ee6a40e',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 7,\r\n    risk: 1,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'BNB',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16',\r\n    },\r\n    tokenSymbol: 'BNB',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 8,\r\n    risk: 1,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'BUSD',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    },\r\n    tokenSymbol: 'BUSD',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 9,\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'BTCB',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xF45cd219aEF8618A92BAa7aD848364a158a24F33',\r\n    },\r\n    tokenSymbol: 'BTCB',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 10,\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'ETH',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7213a321F1855CF1779f42c0CD85d3D95291D34C',\r\n    },\r\n    tokenSymbol: 'ETH',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 11,\r\n    risk: 1,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'USDT',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x55d398326f99059fF775485246999027B3197955',\r\n    },\r\n    tokenSymbol: 'USDT',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x55d398326f99059fF775485246999027B3197955',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.USDT,\r\n    quoteTokenAdresses: contracts.usdt,\r\n  },\r\n]\r\n\r\nexport default farms","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from '@pancakeswap-libs/uikit'\r\nimport Page from './layout/Page'\r\n\r\nconst Wrapper = styled(Page)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst PageLoader: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Spinner />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PageLoader\r\n","import { createGlobalStyle } from 'styled-components'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\r\n\r\ndeclare module 'styled-components' {\r\n  /* eslint-disable @typescript-eslint/no-empty-interface */\r\n  export interface DefaultTheme extends PancakeTheme {}\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  // * {\r\n  //   font-family: 'Poppins', sans-serif;\r\n  // }\r\n  body {\r\n    background-image: linear-gradient(\r\n      107deg\r\n      ,#ffe2b5 0%,#ffe2b5 100%);\r\n    //background-image: ${({ theme }) => (theme.isDark ? 'url(/images/bg.png)' : 'url(/images/bg.png)')};\r\n    img {\r\n      height: auto;\r\n      max-width: 100%;\r\n    }\r\n   \r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Link, ResetCSS } from '@pancakeswap-libs/uikit'\r\nimport useToast from 'hooks/useToast'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport Image from 'views/Nft/components/Image'\r\nimport styled from 'styled-components'\r\nimport { ToastListener } from './contexts/ToastsContext'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\r\nimport GlobalStyle from './style/Global'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\nconst Presale = lazy(() => import('./views/Presale'))\r\nconst PublicPresale = lazy(() => import('./views/publicPresale'))\r\nconst Team = lazy(() => import('./views/Team'))\r\n// const Lottery = lazy(() => import('./views/Lottery'))\r\nconst Pools = lazy(() => import('./views/Pools'))\r\n// const Ifos = lazy(() => import('./views/Ifos'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n// const Nft = lazy(() => import('./views/Nft'))\r\n\r\nlet didAskToJoinTelegram = false\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n  }, [account, connect])\r\n\r\n  useFetchPublicData()\r\n\r\n  const { toastSuccess } = useToast()\r\n  const v = Math.random()\r\n  // if (v < 0.3 && !didAskToJoinTelegram) {\r\n  //   const action = { text: 'Join now', url: 'https://t.me/lemonswap' }\r\n  //   toastSuccess('Join out Discord community now?', 'Come chat with us!', action)\r\n  // }\r\n  didAskToJoinTelegram = true\r\n\r\n  return (\r\n    <Router>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n        <Suspense fallback={<PageLoader />}>\r\n        <Switch>\r\n          <Route path=\"/\" exact>\r\n            <Presale />\r\n          </Route>\r\n          {/* 404 */}\r\n          <Route component={NotFound} />\r\n        </Switch>\r\n        </Suspense>\r\n      {/* <NftGlobalNotification /> */}\r\n      <ToastListener />\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","export const EN = { code: 'en', language: 'English' }\r\nexport const AR = { code: 'ar', language: 'العربية' }\r\nexport const CA = { code: 'ca', language: 'Català' }\r\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\r\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\r\nexport const CS = { code: 'cs', language: 'Čeština' }\r\nexport const DA = { code: 'da', language: 'Dansk' }\r\nexport const DE = { code: 'de', language: 'Deutsch' }\r\nexport const NL = { code: 'nl', language: 'Nederlands' }\r\nexport const FIL = { code: 'fil', language: 'Filipino' }\r\nexport const FI = { code: 'fi', language: 'Suomalainen' }\r\nexport const FR = { code: 'fr', language: 'Français' }\r\nexport const EL = { code: 'el', language: 'Ελληνικά' }\r\nexport const HI = { code: 'hi', language: 'हिंदी' }\r\nexport const HU = { code: 'hu', language: 'Magyar' }\r\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\r\nexport const IT = { code: 'it', language: 'Italiano' }\r\nexport const JA = { code: 'ja', language: '日本語' }\r\nexport const KO = { code: 'ko', language: '한국어' }\r\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\r\nexport const RO = { code: 'ro', language: 'Română' }\r\nexport const RU = { code: 'ru', language: 'Русский' }\r\nexport const SR = { code: 'sr', language: 'Српски' }\r\nexport const ESES = { code: 'es-ES', language: 'Español' }\r\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\r\nexport const TA = { code: 'ta', language: 'தமிழ்' }\r\nexport const TR = { code: 'tr', language: 'Türkçe' }\r\nexport const UK = { code: 'uk', language: 'Українська' }\r\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\r\n\r\nexport const allLanguages = [\r\n  EN,\r\n  // AR,\r\n  // CA,\r\n  ZHCN,\r\n  ZHTW,\r\n  // CS,\r\n  // DA,\r\n  // DE,\r\n  // NL,\r\n  // FIL,\r\n  // FI,\r\n  // FR,\r\n  // EL,\r\n  // HI,\r\n  // HU,\r\n  // ID,\r\n  // IT,\r\n  // JA,\r\n  // KO,\r\n  // PTBR,\r\n  // RO,\r\n  // RU,\r\n  // SR,\r\n  // ESES,\r\n  // SVSE,\r\n  // TA,\r\n  // TR,\r\n  // UK,\r\n  // VI,\r\n]\r\n","import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then(r=>r.json())\r\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error(\"ERROR\");\r\n          console.error(e);\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light as lightBase, dark as darkBase, PancakeTheme } from '@pancakeswap-libs/uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\r\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    // setIsDark((prevState) => {\r\n    //   localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n    //   return !prevState\r\n    // })\r\n  }\r\n\r\n  // customize light theme\r\n  const light: PancakeTheme = lightBase\r\n  light.card.background = '#083ad1'\r\n  light.colors.background = '#FF914D'\r\n  light.modal.background = '#1c1c1b'\r\n  light.colors.primary = '#111'\r\n  light.colors.primaryBright = '#FF914D'\r\n  light.colors.secondary = '#FF914D'\r\n  light.colors.tertiary = '#FF914D'\r\n  light.button.primary.background = '#6cd1ff'\r\n  light.button.primary.backgroundHover = '#6cd1ff'\r\n\r\n  // customize dark theme\r\n  const dark: PancakeTheme = darkBase\r\n  dark.card.background = '#105054'\r\n  dark.button.primary.background = '#0b2526'\r\n  dark.button.primary.backgroundHover = '#f4f4f4'\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={isDark ? darkBase : lightBase}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\n\r\nexport default configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\r\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\r\nimport * as bsc from '@binance-chain/bsc-use-wallet'\r\nimport { Provider } from 'react-redux'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\r\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\r\nimport { BlockContextProvider } from 'contexts/BlockContext'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport { ToastsProvider } from 'contexts/ToastsContext'\r\nimport store from 'state'\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  const rpcUrl = getRpcUrl()\r\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeContextProvider>\r\n      <ToastsProvider>\r\n        <LanguageContextProvider>\r\n          <bsc.UseWalletProvider\r\n            chainId={chainId}\r\n            connectors={{\r\n              walletconnect: { rpcUrl },\r\n              bsc,\r\n            }}\r\n          >\r\n            <BlockContextProvider>\r\n              <RefreshContextProvider>\r\n                <ModalProvider>{children}</ModalProvider>\r\n              </RefreshContextProvider>\r\n            </BlockContextProvider>\r\n          </bsc.UseWalletProvider>\r\n        </LanguageContextProvider>\r\n      </ToastsProvider>\r\n      </ThemeContextProvider>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Providers>\r\n      <App />\r\n    </Providers>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n","import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL || 'https://rpc-mainnet.maticvigil.com', { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */\r\nconst getWeb3 = () => {\r\n  const web3 = new Web3(httpProvider)\r\n  return web3\r\n}\r\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\r\n}\r\n\r\nexport { getWeb3, getContract, httpProvider }\r\n"],"sourceRoot":""}